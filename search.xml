<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis 高级学习篇</title>
      <link href="/2020/04/08/redis-xue-xi-xia/"/>
      <url>/2020/04/08/redis-xue-xi-xia/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-高级配置"><a href="#Redis-高级配置" class="headerlink" title="Redis 高级配置"></a>Redis 高级配置</h1><h2 id="一-可能存在的问题"><a href="#一-可能存在的问题" class="headerlink" title="一 可能存在的问题"></a>一 可能存在的问题</h2><p>一般来说，要将 Redis 运用于在项目上，只是用一台 Redis 是万万不能的，原因如下：</p><ol><li>从结构上，单个 Redis 服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力比较大。</li><li>从容量上，单个Redis服务器内存容量有限，就算一个Redis服务器内容量为256G，也不会将所有的内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。</li></ol><p><strong>问题：</strong> <code>内存容量有限、处理能力有限、无法高可用</code></p><h2 id="二-主从复制"><a href="#二-主从复制" class="headerlink" title="二 主从复制"></a>二 主从复制</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>应用场景</p><blockquote><p>电子商务网站上的商品，一般是一次上传，无数次浏览的，专业名词为“多读少写”</p></blockquote><p><strong>主从复制</strong></p><p>一个 Redis 服务可以有多个该服务的复制品，这个 Redis 服务成为 Master，其他的复制品成为 Slaves。</p><p><img src="./images/redis/redis3.png" alt="redis 主从复制"></p><p><strong>主从复制</strong></p><ol><li><strong>读写分离</strong></li><li><strong>数据被复制了好多分</strong></li></ol><h3 id="Redis-主从复制配置"><a href="#Redis-主从复制配置" class="headerlink" title="Redis 主从复制配置"></a>Redis 主从复制配置</h3><h4 id="通用安装包redis"><a href="#通用安装包redis" class="headerlink" title="通用安装包redis"></a>通用安装包redis</h4><ol><li>主数据库不需要任务配置，创建一个从数据库</li></ol><p>redis.conf 配置文件信息添加</p><pre><code>-- port 6380-- slaveof 127.0.0.1 6379</code></pre><ol start="2"><li>启动从服务器</li></ol><pre><code>./bin/redis-server ./redisconf --port 6380 --saveof 127.0.0.1 6379</code></pre><h4 id="Docker-配置-Redis-主从复制"><a href="#Docker-配置-Redis-主从复制" class="headerlink" title="Docker 配置 Redis 主从复制"></a>Docker 配置 Redis 主从复制</h4><p><a href="http://note.youdao.com/noteshare?id=7eeea47aaa338fb6625ec994257d73a9" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=7eeea47aaa338fb6625ec994257d73a9</a></p><h3 id="Redis-哨兵模式"><a href="#Redis-哨兵模式" class="headerlink" title="Redis 哨兵模式"></a>Redis 哨兵模式</h3><p>解决 redis master主机出现宕机的可能 。</p><blockquote><p>有了主从复制实现之后，我们如果想从服务器进行监控，那么在redis2.6以后提供了一个 哨兵 机制，并在 2.8 版本稳定下来。</p></blockquote><p><img src="./images/redis/redis%E5%93%A8%E5%85%B5.png" alt="redis 哨兵"></p><p><strong>核心：心跳机制</strong> 快慢不定</p><blockquote><p>1.不时地监控redis 是够按照预期良好的运行</p><p>2.如果出现某个redis 节点运行出现状况，能够通知另外一个进程</p><p>3.能够进行自动切换，当一个master节点不可用时，能够选举出master的多个slave中的一个作为新的master，其他的slave节点追随新的master地址。</p></blockquote><h3 id="Redis-Cluster集群"><a href="#Redis-Cluster集群" class="headerlink" title="Redis Cluster集群"></a>Redis Cluster集群</h3><p>为了在大流量的访问下提供服务。解决高可用、高并发</p><p>Redis 集群搭建有多种，但从redis3.0 之后<strong>最少使用3个master和3个slave才能建立集群</strong></p><p>Redis Cluster 采用无中心结构，每一个节点保存数据和整个集群状态，每一个节点都和其他所有节点相连，</p><p><img src="./images/redis/redis-cluster.png" alt="redis-cluster"></p><ol><li>所有的 redis 节点彼此环联，内部采用二进制协议优化传输速度和带宽</li><li>节点的 fail 是通过集群中超过半数的节点检测失效才生效</li><li>客户端和 redis 节点直连，不需要中间proxy层，客户端不需要连接集群的所有节点，连接集群中任意一个节点即可。</li><li>redis cluster 把所有的物理节点映射到（0-16383）slot 上。</li><li>Redis 集群预先分好 16384 个哈希槽，当需要在redis 集群中放置一个 key-value 时，redis先对key使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，redis会根据节点数量大致均等的将哈希槽映射到不同的节点中。</li></ol><h3 id="Redis-Cluster-容错"><a href="#Redis-Cluster-容错" class="headerlink" title="Redis Cluster 容错"></a>Redis Cluster 容错</h3><p>​    容错性，是指软件检测应用程序运行的软件或者硬件中发生的错误并从错误中恢复的能力</p><h4 id="1-什么时候判断master-不可用？"><a href="#1-什么时候判断master-不可用？" class="headerlink" title="1 什么时候判断master 不可用？"></a>1 什么时候判断master 不可用？</h4><p>​    投票机制，投票过程是集群中所有的 master 参与，如果半数以上 master 节点与 master 节点通讯超时(cluster-node-timeout) 认为当前 master 节点挂掉</p><h4 id="2-什么时候整个集群不可用"><a href="#2-什么时候整个集群不可用" class="headerlink" title="2 什么时候整个集群不可用"></a>2 什么时候整个集群不可用</h4><p>​    如果集群中任意 master 挂掉，且当前 master 没有 slave 集群进入 fail 状态，也可以理解成集群的 slot 映射[0-16383] 不完整时 进入 fail 状态，如果集群超过半数以上的 master 挂掉，无论是否有 slave ，集群都会进入 <code>挂掉状态</code></p><h3 id="Redis-Cluster-节点分配"><a href="#Redis-Cluster-节点分配" class="headerlink" title="Redis Cluster 节点分配"></a>Redis Cluster 节点分配</h3><p>​    <code>Redis Cluster 采用虚拟的槽分区</code>，所有的键根据哈希函数映射到 0-16383 个整数的槽，每个节点负责维护一部分的槽以及槽所印映射的键值数据</p><p>​    三个主节点分别是A、B、C三个节点，它们可以是一台机器上的三个端口，也可以是三台不同的服务器，那么，采用哈希槽（hash slot）的方式来分配 16384 个slot的话，他们三个节点分别承担的 slot 区间是</p><blockquote><p>节点 A 覆盖 0-5460</p><p>节点 B 覆盖 5461-10922</p><p>节点 C 覆盖 10923-16383</p></blockquote><h2 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h2><p>集群搭建参考官网：<a href="https://redis.io/topics/cluster-tutorial" target="_blank" rel="noopener">https://redis.io/topics/cluster-tutorial</a></p><p>redis 集群至少需要三个 master 节点，我们这里搭建三个 master 节点，并且给每一个 master 在搭建一个 slave 节点，总共 6 个 redis 节点，这里用一台机器部署这 6 个节点。三主三从模式，Redis 5.0 以上。</p><h3 id="1、创建-Redis-节点安装路径"><a href="#1、创建-Redis-节点安装路径" class="headerlink" title="1、创建 Redis 节点安装路径"></a>1、创建 Redis 节点安装路径</h3><pre><code>[root@localhost ~]# mkdir /usr/local/redis_cluster </code></pre><h3 id="2、创建-7000-7005-文件夹，分配redis-conf"><a href="#2、创建-7000-7005-文件夹，分配redis-conf" class="headerlink" title="2、创建 7000 -7005 文件夹，分配redis.conf"></a>2、创建 7000 -7005 文件夹，分配redis.conf</h3><pre><code>[root@localhost ~]# cd /usr/local/redis_cluster/[root@localhost redis_cluster]# mkdir 7000 7001 7002 7003 7004 7005[root@localhost redis_cluster]# wget http://download.redis.io/redis-stable/redis.conf[root@localhost redis_cluster]# ls7000  7001  7002  7003  7004  7005  redis.conf[root@localhost redis_cluster]# cp redis.conf ./7000[root@localhost redis_cluster]# cp redis.conf ./7001[root@localhost redis_cluster]# cp redis.conf ./7002[root@localhost redis_cluster]# cp redis.conf ./7003[root@localhost redis_cluster]# cp redis.conf ./7004[root@localhost redis_cluster]# cp redis.conf ./7005</code></pre><h3 id="3、配置每一个的-redis-conf"><a href="#3、配置每一个的-redis-conf" class="headerlink" title="3、配置每一个的 redis.conf"></a>3、配置每一个的 redis.conf</h3><pre><code># 关闭保护模式 用于公网访问protected-mode no# 端口port 7000# 开启集群模式cluster-enabled yescluster-config-file nodes-7000.confcluster-node-timeout 5000# 后台启动daemonize yespidfile /var/run/redis_7000.pidlogfile "7000.log"# dir /redis/data# bind 127.0.0.1# 连接从节点密码masterauth 123456# 设置密码requirepass 123456</code></pre><h3 id="4、redis-启动"><a href="#4、redis-启动" class="headerlink" title="4、redis 启动"></a>4、redis 启动</h3><pre><code>[root@localhost redis_cluster]# ./redis-5.0.8/src/redis-server ./7000/redis.conf[root@localhost redis_cluster]# ps -ef|grep -i redis[root@localhost redis_cluster]# ./redis-5.0.8/src/redis-server ./7001/redis.conf[root@localhost redis_cluster]# ./redis-5.0.8/src/redis-server ./7002/redis.conf[root@localhost redis_cluster]# ./redis-5.0.8/src/redis-server ./7003/redis.conf[root@localhost redis_cluster]# ./redis-5.0.8/src/redis-server ./7004/redis.conf[root@localhost redis_cluster]# ./redis-5.0.8/src/redis-server ./7005/redis.conf</code></pre><h3 id="5、创建-redis-集群"><a href="#5、创建-redis-集群" class="headerlink" title="5、创建 redis 集群"></a>5、创建 redis 集群</h3><blockquote><p>官网告知：<br>创建集群<br>现在我们有许多实例正在运行，我们需要通过将一些有意义的配置写入节点来创建集群。<br>如果您使用的是Redis 5，这很容易完成，这是因为嵌入到中的Redis Cluster命令行实用程序为我们提供了帮助，该实用程序redis-cli可用于创建新集群，检查或重新分片现有集群等。</p></blockquote><p>命令：  <code>./redis-5.0.8/src/redis-cli --cluster create -a 123456 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 --cluster-replicas 1</code></p><pre><code>[root@localhost redis_cluster]# ./redis-5.0.8/src/redis-cli --cluster create -a 123456 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 --cluster-replicas 1Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Master[0] -&gt; Slots 0 - 5460Master[1] -&gt; Slots 5461 - 10922Master[2] -&gt; Slots 10923 - 16383Adding replica 127.0.0.1:7004 to 127.0.0.1:7000Adding replica 127.0.0.1:7005 to 127.0.0.1:7001Adding replica 127.0.0.1:7003 to 127.0.0.1:7002&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity[WARNING] Some slaves are in the same host as their masterM: d48cfd2e99a71377e42629495529fcbcfd0d9543 127.0.0.1:7000   slots:[0-5460] (5461 slots) masterM: 370cf09b9d18445cb9ce10dea9466f95cc0394d3 127.0.0.1:7001   slots:[5461-10922] (5462 slots) masterM: 309eb1db4b3265f8898d144b0cfccd3f5e468574 127.0.0.1:7002   slots:[10923-16383] (5461 slots) masterS: 052e1e68b84e54901df10159b04fbd9afd05aedd 127.0.0.1:7003   replicates d48cfd2e99a71377e42629495529fcbcfd0d9543S: ee4dba83f69c7bcde1b0266b4d995ece7a1bc79c 127.0.0.1:7004   replicates 370cf09b9d18445cb9ce10dea9466f95cc0394d3S: 488163d590240d9ff325b8fbf94c877aef588117 127.0.0.1:7005   replicates 309eb1db4b3265f8898d144b0cfccd3f5e468574Can I set the above configuration? (type 'yes' to accept): yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join..&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7000)M: d48cfd2e99a71377e42629495529fcbcfd0d9543 127.0.0.1:7000   slots:[0-5460] (5461 slots) master   1 additional replica(s)M: 309eb1db4b3265f8898d144b0cfccd3f5e468574 127.0.0.1:7002   slots:[10923-16383] (5461 slots) master   1 additional replica(s)S: ee4dba83f69c7bcde1b0266b4d995ece7a1bc79c 127.0.0.1:7004   slots: (0 slots) slave   replicates 370cf09b9d18445cb9ce10dea9466f95cc0394d3S: 488163d590240d9ff325b8fbf94c877aef588117 127.0.0.1:7005   slots: (0 slots) slave   replicates 309eb1db4b3265f8898d144b0cfccd3f5e468574S: 052e1e68b84e54901df10159b04fbd9afd05aedd 127.0.0.1:7003   slots: (0 slots) slave   replicates d48cfd2e99a71377e42629495529fcbcfd0d9543M: 370cf09b9d18445cb9ce10dea9466f95cc0394d3 127.0.0.1:7001   slots:[5461-10922] (5462 slots) master   1 additional replica(s)[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.</code></pre><h3 id="集群验证"><a href="#集群验证" class="headerlink" title="集群验证"></a>集群验证</h3><p>在某台机器上 连接任意一个redis 客户端 就可以拿到所有的数据。</p><pre><code>[root@localhost redis_cluster]# ./redis-5.0.8/src/redis-cli -h 127.0.0.1 -a 123456 -c -p 7000Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.127.0.0.1:7000&gt; keys *(empty list or set)127.0.0.1:7000&gt; info replication</code></pre><pre><code>127.0.0.1:7000&gt; cluster nodes309eb1db4b3265f8898d144b0cfccd3f5e468574 127.0.0.1:7002@17002 master - 0 1586487109560 3 connected 10923-16383ee4dba83f69c7bcde1b0266b4d995ece7a1bc79c 127.0.0.1:7004@17004 slave 370cf09b9d18445cb9ce10dea9466f95cc0394d3 0 1586487109360 5 connected488163d590240d9ff325b8fbf94c877aef588117 127.0.0.1:7005@17005 slave 309eb1db4b3265f8898d144b0cfccd3f5e468574 0 1586487109000 6 connected052e1e68b84e54901df10159b04fbd9afd05aedd 127.0.0.1:7003@17003 slave d48cfd2e99a71377e42629495529fcbcfd0d9543 0 1586487108353 4 connectedd48cfd2e99a71377e42629495529fcbcfd0d9543 127.0.0.1:7000@17000 myself,master - 0 1586487108000 1 connected 0-5460370cf09b9d18445cb9ce10dea9466f95cc0394d3 127.0.0.1:7001@17001 master - 0 1586487108857 2 connected 5461-10922</code></pre><p><strong>注意：</strong> </p><ul><li>主节点写入的时候，不会立马同步到 slave 分支，异步的去获取 key-value 值。</li><li>启动一定要加入 -c </li></ul><h3 id="Redis-Cluster-总结"><a href="#Redis-Cluster-总结" class="headerlink" title="Redis Cluster 总结"></a>Redis Cluster 总结</h3><p> Redis Cluster 为了保证数据的高可用，加入了主从模式，一个主节点对应一个或者多个从节点，主节点提供数据的存取，从节点则是从主节点拉取数据进行备份，当这个主节点挂掉之后，就会有这个从节点选取一个来从当主节点，从儿保证集群不会挂掉。</p><p>集群有ABC三个主节点，如果这3个节点都没有加入从节点，如果B挂掉了，我们就无法访问真个集群了，A和C的slot 也无法访问了。</p><p>所以在创建集群的时候，一定要为每一个主节点都添加一个从节点，比如像这样，主节点分别为A、B、C，从节点A1、B1、C1。这样保证A挂掉之后也可以继续正常工作。</p><p>A1 节点替换 A 节点，所以 Redis 集群会选择 A1 作为新的主节点，集群将会继续正确的提供服务，当B重新开启后，他会变成A1 的从节点。</p><p>如果 A 和 A1 同时挂掉，那么 Redis 集群将无法工作</p><h3 id="Redis-cluster-关闭集群"><a href="#Redis-cluster-关闭集群" class="headerlink" title="Redis cluster 关闭集群"></a>Redis cluster 关闭集群</h3><pre><code>/usr/local/redis_cluster/src/redis-cli -c -h 127.0.0.1 -p 7000 shutdown/usr/local/redis_cluster/src/redis-cli -c -h 127.0.0.1 -p 7001 shutdown</code></pre><pre><code>[root@localhost redis_cluster]# vi redis-shutdown.sh[root@localhost redis_cluster]# chmod u+x redis-shutdown.sh</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 学习</title>
      <link href="/2020/04/08/redis-xue-xi-shang/"/>
      <url>/2020/04/08/redis-xue-xi-shang/</url>
      
        <content type="html"><![CDATA[<h3 id="List-数据类型"><a href="#List-数据类型" class="headerlink" title="List 数据类型"></a>List 数据类型</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>​    List 类型是一个链表解构的集合，其中主要有 push、pop、获取元素等，更详细的说，list类型是一个双端链表的节后，我们可以通过相关的操作井陉集合的头部或者尾部添加和删除元素，list 的设计非常简单精巧，既可以作为栈、也可以作为队列使用。</p><blockquote><p>按照插入顺序排序，你可以添加一个元素到列表的头部（左边）或者链表的尾部（右边）。一个列表最多包含   2^32 -1 个元素</p></blockquote><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h5><pre><code>lpush key value1 [values ...] : 将一个或者多个值插入到列表头部（左侧）rpush key value1 [values ...] : 将一个或者多个值插入到列表尾部（右侧）lpushx key value : 将一个值插入到已经存在的列表头部，如果列表不存在 操作无效rpushx key value : 将一个值插入到已经存在的列表尾部，如果列表不存在 操作无效</code></pre><h5 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h5><pre><code>llen key : 获取列表长度lindex key index 通过索引获取列表的元素lrange key start end 获取李彪指定范围的元素 lrange list_key 0 -1</code></pre><blockquote><p>描述：返回列表中指定区间的元素，区间以偏移量 start end 决定。</p><p>也可使用负数 -1 代表列表的最后一个元素，-2 代表列表的倒数第二个元素 ，以此类推。</p></blockquote><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><pre><code>lpop list_key 左侧删除rpop list_key 右侧删除堵塞的弹出blpop list_key [keys ...] timeout 移除并且获取列表的第一个元素，如果列表没有数据，并且堵塞列表，知道列表中有数据，并且弹出元素为止，超时返回 nilbrpop list_key [keys ...] timeoutltrim key start end 对一个列表进行 裁剪 留下 [start,end] 的数据</code></pre><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><pre><code>lset key index value : 修改某一列表的下标为 index 的值linsert key bafore|after word value 在某一列表值为 word 之前或者之后插入 value 值 </code></pre><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><pre><code>rpoplpush l1_key l2_key 将 l1 弹出的数据 插入到 l2 列表中rpoplpush l1 l1</code></pre><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p><strong>项目常用于：1、对数据量大的集合数据删减 2、任务队列</strong></p><p><strong>1、对数据量大的集合数据删减</strong></p><p>列表数据显示、关注列表、粉丝列表、留言评价等 分页、热点新闻（TOP5）等</p><p>利用 <code>lrange</code> 可以方便的实现分页功能。</p><p>2、任务列表</p><h2 id="Redis-多数据库"><a href="#Redis-多数据库" class="headerlink" title="Redis 多数据库"></a>Redis 多数据库</h2><p>在 redis 中，数据库是由一个整数索引标识，而不是数据库名称，默认情况下  数据库连接0</p><p><strong>database 16 // (0 - 15)</strong></p><p><strong>select 0 // 进行切换</strong></p><p>移动数据到某一个数据库中</p><pre><code>move key 数据库</code></pre><p>数据库清空</p><pre><code>flushdb 当前数据库flushall 所有数据库</code></pre><h2 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h2><p>redis 事务可以一次执行多个命令，按顺序的串行化执行，执行中不会被其他命令所影响。</p><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote><p>批量操作在 wxec 命令前被放入队列缓存中</p></blockquote><ol><li><strong>Redis 会将一个事务中的所有命令序列化，按顺序执行</strong></li><li><strong>执行中不会被其他命令插入，不许出现加塞行为</strong></li><li><strong>不支持事务回滚</strong></li></ol><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><pre><code>discard    : 取消事务，放弃执行事务块内的所以命令exec    : 执行所有事务块内的命令multi    : 标记一个事务块的开始unwatch    : 取消 watch 命令对所有 key 的监视watch key [keys ...]     : 监视一个或者多个key，如果事务执行之前被其他命令所改动，事务被打断</code></pre><p>一个事务从开始到执行的三个阶段</p><ul><li>开始事务 multi </li><li>命令序列化，入队</li><li>执行事务 exec</li></ul><p><img src="./images/redis/redis-trans.jpg" alt="redis 事务"></p><h3 id="实例1-multi-exec"><a href="#实例1-multi-exec" class="headerlink" title="实例1 multi exec"></a>实例1 multi exec</h3><p>转账功能，A 向 B 转账 50 块钱</p><pre class=" language-shell"><code class="language-shell"># 开启事务127.0.0.1:6379> multi OK127.0.0.1:6379> get account:aQUEUED127.0.0.1:6379> get account:bQUEUED127.0.0.1:6379> decrby account:a 50QUEUED127.0.0.1:6379> incrby account:b 50QUEUED# exec:执行事务;  discard:取消事务127.0.0.1:6379> exec1) "100"2) "100"3) (integer) 504) (integer) 150</code></pre><h3 id="实例3-事务的错误处理"><a href="#实例3-事务的错误处理" class="headerlink" title="实例3 事务的错误处理"></a>实例3 事务的错误处理</h3><p><strong>事务的错误处理：</strong> </p><p>如果执行的某个命令报出错误，则只有报错的命令不会执行，其他命令正常执行，<code>且不会回滚</code></p><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379> MULTIOK127.0.0.1:6379> set lijian lijianQUEUED127.0.0.1:6379> get lijianQUEUED127.0.0.1:6379> INCR lijianQUEUED127.0.0.1:6379> EXEC1) OK2) "lijian"3) (error) ERR value is not an integer or out of range</code></pre><h3 id="实例4-事务中-命令有错误"><a href="#实例4-事务中-命令有错误" class="headerlink" title="实例4 事务中 命令有错误"></a>实例4 事务中 命令有错误</h3><p>如果事务开启后，某个命令出现语法错误，整个事务都被取消，事务执行失败</p><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379> MULTIOK127.0.0.1:6379> set li keyQUEUED127.0.0.1:6379> asdfksalfm asdfnl(error) ERR unknown command `asdfksalfm`, with args beginning with: `asdfnl`, 127.0.0.1:6379> exec(error) EXECABORT Transaction discarded because of previous errors.127.0.0.1:6379> get li(nil)</code></pre><h3 id="实例5-事务的Watch"><a href="#实例5-事务的Watch" class="headerlink" title="实例5  事务的Watch"></a>实例5  事务的Watch</h3><pre><code>watch key [keys ...] 监视一个或者多个key 如果事务执行之前 key 被其他命令改变，那么事务将被打断</code></pre><p><strong>需求</strong> 某一个账户在一事务内进行操作，在提交事务之前，另一个账户对账户进行了操作</p><pre class=" language-shell"><code class="language-shell"># 客户端 1127.0.0.1:6379> keys * 1) "account:a"127.0.0.1:6379> watch account:aOK127.0.0.1:6379> MULTIOK127.0.0.1:6379> INCRBY account:a 50QUEUED# 执行之前 客户端 2 进行了数据修改127.0.0.1:6379> exec(nil)# 客户端 2127.0.0.1:6379> set account:a 20OK127.0.0.1:6379> get account:a"20"127.0.0.1:6379> keys *1) "account:a"</code></pre><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><p>​    一组命令，要不全部执行，要不全不执行。</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>秒杀</p><pre><code>商品秒杀 14:00 秒杀100步手机key: 存放100 手机编号秒杀流程：    1. 如果秒杀成功；用户名 存入、抢成功的手机编号得到，存放在 list 中    2. 在初始化 商品库中 移除抢到的手机编号。    以上应该是一个事务。</code></pre><h2 id="Redis-持久化技术"><a href="#Redis-持久化技术" class="headerlink" title="Redis 持久化技术"></a>Redis 持久化技术</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>rdb 是 Redis DataBase缩写</p><p>功能核心函数 rdbSave（生成RDB文件）和rdbLoad（从文件加载到内存）两个函数</p><p><strong>优点：</strong> 是redis 的默认持久化机制，快照保存数据级快，还原数据级快，适用于灾难备份</p><p><strong>缺点：</strong> 小内存机器不适合使用，RDB机制符合要求就会进行快照，数据容易丢失</p><p><strong>快照条件</strong></p><blockquote><p>1、服务器正常关闭时 ./bin/redis-cli shutdown</p><p>2、key满足一定条件，会进行快照，vim redis.conf 搜索 save</p><p>​    save 900 1</p><p>​    save 300 10</p><p>​    save 60 10000</p></blockquote><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>由于快照方式在一定间隔时间做一次，如果redis 突然意外 down 掉的话，就会丢失最后一次快照后的所有修改，如果应用要求不能丢失任何修改的话，可以采用 aof 持久化机制。</p><p>Append-Only file ：AOF 比快照有更好的持久化性，是由于在使用 aof 持久化方式时，redis会将每一个收到的 <code>写命令</code> 都会通过 <code>write 函数</code>追加到文件中（appendonly.aof）。当 redis 重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容</p><p><strong>每当执行服务器任务时或者函数时 flushAppendOnlyFile 函数都会调用，这个函数执行以下两个工作 aof 写入保存</strong></p><ol><li>Write 根据条件 将 aof_buf 的缓存写入到 AOF 文件</li><li>SAVE 根据条件，调用 fsync 或者 fdatasync 函数 将 AOF 文件保存到磁盘中</li></ol><p><strong>有三种方式如下：（默认每秒 fsync 一次）</strong></p><ul><li>appendonly yes</li><li>#appendfsync always // 收到写命令就立即写入磁盘，最慢，但是保证数据完全持久化</li><li>appendfsync everysec // 每秒写入磁盘一次</li><li>#appendfsync no // 完全依赖os 性能最好，持久化没保证</li></ul><p><strong>产生的问题</strong></p><p>aof 文件会越来越大，产生很多冗余无用的记录</p><h3 id="Redis-恢复机制"><a href="#Redis-恢复机制" class="headerlink" title="Redis 恢复机制"></a>Redis 恢复机制</h3><p><img src="./images/redis/redis-aof-rdb.jpg" alt="redis 恢复机制"></p><h2 id="Redis-缓存和数据一致性"><a href="#Redis-缓存和数据一致性" class="headerlink" title="Redis 缓存和数据一致性"></a>Redis 缓存和数据一致性</h2><h3 id="1、实时同步"><a href="#1、实时同步" class="headerlink" title="1、实时同步"></a>1、实时同步</h3><p>对强一致性要求比较高，采用实时同步方案，即查询缓存，查询不到再从DB查询，保存到缓存；更新缓存时，先更新数据库，再将缓存的设置过期</p><p>@Cacheable ： 查询时使用 注意 Long 类型需要转换为String类型，否则抛异常。‘</p><p>@CachePut ：更新时候使用，使用此注解，一定会从DB 查询数据</p><p>@CacheEvict ： 删除时使用</p><p>@Caching ：组合用法</p><h3 id="2、异步队列"><a href="#2、异步队列" class="headerlink" title="2、异步队列"></a>2、异步队列</h3><p>对于并发程度较高的，可采用异步队列的方式同步，可采用 kafka等消息中间件处理消息生产和消费。</p><p><strong>案例</strong></p><blockquote><p>一个文章，点赞数量，一天 100万点赞</p><p>每天凌晨定时任务，写入到 Mysql 中。</p><p>电商网站：</p><p>​    注册完成 –&gt; </p><p>​      1.  邮箱发送注册成功</p><pre><code>                            2. 手机号发送验证码                               3. 将注册信息插入到数据库中</code></pre></blockquote><p>异步队列：解耦、异步、削峰</p><h3 id="3、使用阿里的同步工具-canal"><a href="#3、使用阿里的同步工具-canal" class="headerlink" title="3、使用阿里的同步工具 canal"></a>3、使用阿里的同步工具 canal</h3><p><img src="./images/redis/canal.png" alt="canal"></p><p><strong>Canal 工作原理</strong></p><p><img src="./images/redis/canal2.png" alt="canal 工作原理"></p><h3 id="4、采用-UDF-自定义函数编写"><a href="#4、采用-UDF-自定义函数编写" class="headerlink" title="4、采用 UDF 自定义函数编写"></a>4、采用 UDF 自定义函数编写</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="穿透"><a href="#穿透" class="headerlink" title="穿透"></a>穿透</h3><p><strong>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中需要从数据库查询，查询不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库中去查询，造成了缓存穿透</strong></p><p><strong>解决方法</strong> 持久层查询不到就缓存空结果，查询时先判断缓存中是否 exists key ，如果有直接返回空，没有则查询后返回。</p><p><code>注意：insert 时需要清除查询的key</code></p><pre><code>redis key 是否存在    如果不存在        查询数据库 mysql insert into ...123  redis.set(key,123对象)        存入redis 并且返回        redis.set(key,"null")    如果存在        查询redis 并返回---------------在传参的url中 进行加密设置localhost:8080/user?id=123localhost:8080/user?id=asdf;sladkfs 后台就会解密失败放置 不存在的数据查询</code></pre><h3 id="雪崩"><a href="#雪崩" class="headerlink" title="雪崩"></a>雪崩</h3><p><strong>雪崩: 缓存大量失效的问题，引发大量的查询数据库</strong></p><p><strong>解决方法</strong></p><ul><li>用锁/分布式 或者队列串行访问</li><li>缓存失效时间均匀分布</li></ul><blockquote><p>如果缓存集中在一个时间内失效，发生了大量的缓存穿透，所有的查询都落在了数据库上，造成了缓存雪崩</p><p>这个没有完美的解决方法，但可以分析用户行为，尽量让失效的时间点均匀分布，大多数系统设计者考虑加锁或者队列的方式保证缓存在单线程写，从而避免失效时大量的并发请求落在底层存储系统上。</p></blockquote><h3 id="预热"><a href="#预热" class="headerlink" title="预热"></a>预热</h3><p>可以通过缓存 reload 机制，预先去更新缓存，在即将发生大量并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀</p><h3 id="热点-Key"><a href="#热点-Key" class="headerlink" title="热点 Key"></a>热点 Key</h3><p><strong>热点 key ：某一个key访问非常频繁，当key失效的时候有大量线程来构建缓存，导致负载增加，系统崩溃</strong></p><p><strong>解决方法：</strong></p><ol><li>使用锁，单机使用 synchronize，lock 等 分布式使用分布式锁</li><li>缓存过期时间不设置，而设置 在key 对应的value 里，如果检测到存的时间超过过期时间则异步更新缓存</li><li>在value设置一个比过期时间t0小的过期时间值t1，当t1过期的时候，延长t1并做更新缓存操作。</li><li>设置标签缓存，标签缓存设置过期时间，标签缓存过期后，需要异步的更新实际缓存</li></ol><p><img src="./images/redis/lock.png" alt="双重锁实现数据查询"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ES6入门</title>
      <link href="/2020/03/30/javascript-es6-ru-men/"/>
      <url>/2020/03/30/javascript-es6-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="第-1-章-变量的用法"><a href="#第-1-章-变量的用法" class="headerlink" title="第 1 章 变量的用法"></a>第 1 章 变量的用法</h2><h3 id="1-1-let-关键字"><a href="#1-1-let-关键字" class="headerlink" title="1.1 let 关键字"></a>1.1 let 关键字</h3><p>let 是<code>块级作用域</code>变量关键字，块级也就是一对大括号。 在 {} 中声明，那么它只能在 {} 中访问。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b is not defined</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a is not defined</span></code></pre><p>let 能够防止了循环变量变成全局变量。</p><pre><code>for(let i=0; i &lt; 10; i++){}console.log(i); // i is not defined</code></pre><ul><li>使用 let 变量，没有变量提升。必须先声明后使用</li></ul><p><strong>总结：</strong> 在一个大括号（{}）中，使用 <code>let</code> 关键字声明的变量才具有块级作用域；而 <code>var 不具有</code></p><h3 id="1-2-var-关键字"><a href="#1-2-var-关键字" class="headerlink" title="1.2 var 关键字"></a>1.2 var 关键字</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a is not defined</span></code></pre><h3 id="1-3-const-关键字"><a href="#1-3-const-关键字" class="headerlink" title="1.3 const 关键字"></a>1.3 const 关键字</h3><p>作用：声明常量，常量就是值不可更改。</p><ul><li>具有块级作用域</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a is not defined</span></code></pre><ul><li>使用 const 声明常量时，<code>必须赋初始值</code>。</li><li>使用 const 声明常量时，值不可修改，<strong>但是可以修改对象或者数组。</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>PI <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Assignment to constant variable</span></code></pre><h3 id="1-4-let-const-var-的区别"><a href="#1-4-let-const-var-的区别" class="headerlink" title="1.4 let const var 的区别"></a>1.4 let const var 的区别</h3><ol><li>使用 var 声明的变量，其作用域位该语块所在的函数内，并且存在变量的提升现象。</li><li>使用 let 声明的变量，其作用域位还语句所在的代码块中，不存在变量提升。</li><li>使用 const 声明的变量，在后面的出现的代码中不能修改该变量的值。</li></ol><table><thead><tr><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>函数级作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>变量提升</td><td>不存在变量提升</td><td>不存在变量提升</td></tr><tr><td>值可变</td><td>值可变</td><td>值不可变</td></tr></tbody></table><h2 id="第-2-章-解构赋值用法"><a href="#第-2-章-解构赋值用法" class="headerlink" title="第 2 章 解构赋值用法"></a>第 2 章 解构赋值用法</h2><blockquote><p>ES6 中允许从数组中提取值，按照对应的位置，对变量赋值，对象也可以实现解构</p></blockquote><h3 id="2-1-数组解构"><a href="#2-1-数组解构" class="headerlink" title="2.1 数组解构"></a>2.1 数组解构</h3><p><strong>注意：</strong><code>解构不成功，变量的值为 undefined</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> aryconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefiend</span></code></pre><h3 id="2-2-对象解构"><a href="#2-2-对象解构" class="headerlink" title="2.2 对象解构"></a>2.2 对象解构</h3><ul><li>方式一</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// `zhangsan`</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span></code></pre><ul><li>方式二</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span>myName<span class="token punctuation">,</span> age<span class="token punctuation">:</span>myAge<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// `zhangsan`</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myAge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span></code></pre><h2 id="第-3-章-箭头函数"><a href="#第-3-章-箭头函数" class="headerlink" title="第 3 章 箭头函数"></a>第 3 章 箭头函数</h2><p>箭头函数是 ES6 新增的定义函数的方式，箭头函数是用来简化函数定义语法的。</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通常我们给函数起一个名字</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>若函数体内只有一句代码，且代码的执行结果是有返回值的，可以忽略大括号，若形参的个数只有一个，小括号也可以省略</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//传统函数</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//箭头函数</span><span class="token keyword">const</span> fn2 <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>箭头函数不绑定 this 关键字，箭头函数中的 this 指向 <code>函数定义位置的上下文 this</code>；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    age <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    say <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100 对象是不能产生作用域的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>object<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="第-4-章-剩余参数"><a href="#第-4-章-剩余参数" class="headerlink" title="第 4 章 剩余参数"></a>第 4 章 剩余参数</h2><p>与 Java 的多参数 类似；</p><pre class=" language-js"><code class="language-js"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">'加法'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>title<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    args<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        total <span class="token operator">+</span><span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>剩余参数，还可以和解构配合使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>s1<span class="token punctuation">,</span><span class="token operator">...</span>s2<span class="token punctuation">]</span> <span class="token operator">=</span> students<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'wangwu'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['zhangsan','lisi'] Array[2]</span></code></pre><h3 id="4-1-Array-的拓展方法"><a href="#4-1-Array-的拓展方法" class="headerlink" title="4.1 Array 的拓展方法"></a>4.1 Array 的拓展方法</h3><p>拓展运算符可以将数组或者对象转为用逗号分割的参数序列。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">...</span>ary <span class="token comment" spellcheck="true">//1,2,3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>ary<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 2 3 这里没有逗号</span></code></pre><ul><li>拓展运算符 可以应用于合并数组</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方式一</span><span class="token keyword">let</span> ary1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> ary2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">...</span>ary1 <span class="token comment" spellcheck="true">// 1,2,3</span><span class="token operator">...</span>ary2 <span class="token comment" spellcheck="true">// 4,5,6</span><span class="token keyword">let</span> ary3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>ary1<span class="token punctuation">,</span> <span class="token operator">...</span>ary2<span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 方式二</span>ary1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>ary2<span class="token punctuation">)</span></code></pre><ul><li>拓展运算符 可以将伪数组转换为真正的数组</li></ul><pre><code>var oDiv = document.getElementsByTagName('div');console.log(oDiv);var ary = [...oDiv]ary.push('a')</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombda一篇就够了</title>
      <link href="/2020/03/17/lombda-yi-pian-jiu-gou-liao/"/>
      <url>/2020/03/17/lombda-yi-pian-jiu-gou-liao/</url>
      
        <content type="html"><![CDATA[<h3 id="collect-流转换"><a href="#collect-流转换" class="headerlink" title="collect 流转换"></a>collect 流转换</h3><blockquote><p>将流转换为list。还有toSet()，toMap()等。及早求值。</p></blockquote><pre class=" language-java"><code class="language-java"> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="filter-过滤筛选的作用"><a href="#filter-过滤筛选的作用" class="headerlink" title="filter 过滤筛选的作用"></a>filter 过滤筛选的作用</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> stu<span class="token punctuation">.</span><span class="token function">getStature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">180</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果</span><span class="token comment" spellcheck="true">//[Student{name='路飞', age=22, stature=175, specialities=null}]</span></code></pre><h3 id="map-转换功能，惰性求值"><a href="#map-转换功能，惰性求值" class="headerlink" title="map 转换功能，惰性求值"></a>map 转换功能，惰性求值</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果</span><span class="token comment" spellcheck="true">//[路飞, 红发, 白胡子]</span></code></pre><h3 id="flatMap-将多个Stream合并为一个Stream。惰性求值"><a href="#flatMap-将多个Stream合并为一个Stream。惰性求值" class="headerlink" title="flatMap 将多个Stream合并为一个Stream。惰性求值"></a>flatMap 将多个Stream合并为一个Stream。惰性求值</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span>                <span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"艾斯"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"雷利"</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>students1 <span class="token operator">-</span><span class="token operator">></span> students1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果</span><span class="token comment" spellcheck="true">//[Student{name='路飞', age=22, stature=175, specialities=null}, </span><span class="token comment" spellcheck="true">//Student{name='红发', age=40, stature=180, specialities=null}, </span><span class="token comment" spellcheck="true">//Student{name='白胡子', age=50, stature=185, specialities=null}, </span><span class="token comment" spellcheck="true">//Student{name='艾斯', age=25, stature=183, specialities=null},</span><span class="token comment" spellcheck="true">//Student{name='雷利', age=48, stature=176, specialities=null}]</span></code></pre><h3 id="max和min"><a href="#max和min" class="headerlink" title="max和min"></a>max和min</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> max <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Student<span class="token operator">></span> min <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断是否有值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果</span><span class="token comment" spellcheck="true">//Student{name='白胡子', age=50, stature=185, specialities=null}</span><span class="token comment" spellcheck="true">//Student{name='路飞', age=22, stature=175, specialities=null}</span></code></pre><blockquote><p>max、min接收一个Comparator（例子中使用java8自带的静态函数，只需要传进需要比较值即可。）并且返回一个Optional对象，该对象是java8新增的类，专门为了防止null引发的空指针异常。可以使用max.isPresent()判断是否有值；可以使用max.orElse(new Student())，当值为null时就使用给定值；也可以使用max.orElseGet(() -&gt; new Student());这需要传入一个Supplier的lambda表达式。</p></blockquote><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"红发"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"白胡子"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s1 <span class="token operator">-</span><span class="token operator">></span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄小于45岁的人数是："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果</span><span class="token comment" spellcheck="true">//年龄小于45岁的人数是：2</span></code></pre><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><blockquote><p>reduce 操作可以实现从一组值中生成一个值。在上述例子中用到的 count 、 min 和 max 方<br>法，因为常用而被纳入标准库中。事实上，这些方法都是 reduce 操作。及早求值。</p></blockquote><pre><code>public class TestCase {    public static void main(String[] args) {        Integer reduce = Stream.of(1, 2, 3, 4).reduce(0, (acc, x) -&gt; acc+ x);        System.out.println(reduce);    }}//输出结果//10</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React 学习</title>
      <link href="/2020/03/12/react-ru-men-xue-xi/"/>
      <url>/2020/03/12/react-ru-men-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="React-的学习"><a href="#React-的学习" class="headerlink" title="React 的学习"></a>React 的学习</h2><blockquote><p>react 有一个组件库 <a href="https://ant.design/" target="_blank" rel="noopener">https://ant.design/</a></p></blockquote><p>引入组件库 UI</p><pre><code>npm install -D antd// 按需引入npm install -D babel-plugin-import</code></pre><p>修改配置文件 .babelrc</p><pre><code>// .babelrc or babel-loader option{  "plugins": [    ["import", { "libraryName": "antd", "libraryDirectory": "es", "style": "css" }] // `style: true` 会加载 less 文件  ]}</code></pre><h3 id="1-React-项目创建"><a href="#1-React-项目创建" class="headerlink" title="1. React 项目创建"></a>1. React 项目创建</h3><pre class=" language-shell"><code class="language-shell">npm install -g create-react-app//创建 项目create-react-app 项目名</code></pre><h3 id="2-React-元素的渲染"><a href="#2-React-元素的渲染" class="headerlink" title="2. React 元素的渲染"></a>2. React 元素的渲染</h3><pre><code>class ShoppingList extends React.Component {  render() {    return (      &lt;div className="shopping-list"&gt;        &lt;h1&gt;Shopping List for {this.props.name}&lt;/h1&gt;        &lt;ul&gt;          &lt;li&gt;Instagram&lt;/li&gt;          &lt;li&gt;WhatsApp&lt;/li&gt;          &lt;li&gt;Oculus&lt;/li&gt;        &lt;/ul&gt;      &lt;/div&gt;    );  }}// 用法示例: &lt;ShoppingList name="Mark" /&gt;</code></pre><p>JSX 语法</p><pre><code>let h1 = &lt;h1&gt; hello word &lt;/h1&gt;;// 但是 只能有一个根节点let root = document.querySelecter('#root');ReactDOM.render(h1,root);// (渲染的组件，渲染到某个节点上)</code></pre><p><code>实例1:浏览器中实现一个时间</code></p><ul><li>方式1</li></ul><pre><code>function clock(){    let time = new Date().toLocaleTimeString();    let element = &lt;h1&gt; 现在时间是 {time} &lt;/h1&gt;;    let root = document.querySelecter('#root');    ReactDOM.render(element,root);// (渲染的组件，渲染到某个节点上)}clock();// 间隔函数setInterval(clock,1000);</code></pre><ul><li>方式2</li></ul><pre><code>// react 函数式组件function Clock(props){    return {        &lt;div&gt;            &lt;h1&gt; 现在时间是 {props.date.toLocaleTimeString()} &lt;/h1&gt;        &lt;/div&gt;    }    }function run (){    ReactDOM.render(        &lt;Clock date={new Date()} /&gt;,        document.querySelecter('#root')    );}setInterval(run,1000);run();</code></pre><h3 id="3-React-JSX-语言"><a href="#3-React-JSX-语言" class="headerlink" title="3. React-JSX 语言"></a>3. React-JSX 语言</h3><p>优点：</p><ul><li>JSX 执行更快，编译为 JavaScript 代码时进行了优化</li><li>类型更安全，编译过程如果出错就不能编译</li><li>JSX 编写模板更加简单快速（不要和 VUE 比较）</li></ul><p>注意：</p><ol><li>JSX 必须由根节点</li><li>正常的普通 HTML 元素要小写，如果大写，会被默认为组件</li></ol><h3 id="4-React-组件"><a href="#4-React-组件" class="headerlink" title="4. React 组件"></a>4. React 组件</h3><blockquote><p>一个大的组件 是可以 嵌套 组件的。</p></blockquote><ul><li><code>函数式组件</code></li></ul><p><code>注意：</code> 函数式组件 一定要大写 ！！！！</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Clock</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> 现在时间是 <span class="token punctuation">{</span>props<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li><code>类组件</code></li></ul><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">HelloWord</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>component</span><span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Click</span> <span class="token punctuation">/></span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>函数式和类组件的区别？</strong></p><blockquote><p>函数式组件和类组件的区别和使用，函数式比较简单，一般用于静态没有交互事件内容的组件，类组件，一般为交互事件，进行数据的交互。</p></blockquote><ul><li><code>复核组件</code>  组建中又有组件</li></ul><h3 id="5-React-状态（State）-gt-Data"><a href="#5-React-状态（State）-gt-Data" class="headerlink" title="5. React 状态（State）=> Data"></a>5. React 状态（State）=&gt; Data</h3><blockquote><p>相当于 Vue 的 Data,但是 不建议主动赋值 而是采用 setState({ })</p></blockquote><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 构造函数初始化，将需要改变的数据尽量放到 State 数据中。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            time <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>当前时间：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>time<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明周期函数</span>    <span class="token comment" spellcheck="true">// 主键渲染完成挂载</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 此时不像 vue 一样 自动渲染</span>            <span class="token comment" spellcheck="true">// error => this.state.time = new Date().toLocaleTimeString;</span>            <span class="token comment" spellcheck="true">// 切勿直接修改 state 数据</span>            <span class="token comment" spellcheck="true">// 和小程序 相似</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                time <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实例1： 点击内容进行切换</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            c1 <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            c2 <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clickEvent <span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickEvent<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">clickEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> index <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里 this 是 undefine</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">==</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                c1 <span class="token punctuation">:</span> <span class="token string">"content active"</span><span class="token punctuation">,</span>                c2 <span class="token punctuation">:</span> <span class="token string">"content"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                c1 <span class="token punctuation">:</span> <span class="token string">"content"</span><span class="token punctuation">,</span>                c2 <span class="token punctuation">:</span> <span class="token string">"content active"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickEvent<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>点击一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickEvent<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>点击二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>c1<span class="token punctuation">}</span></span> <span class="token punctuation">></span></span> 内容一 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>c2<span class="token punctuation">}</span></span> <span class="token punctuation">></span></span> 内容二 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-React-父子组件传递数据-（Props）"><a href="#6-React-父子组件传递数据-（Props）" class="headerlink" title="6. React 父子组件传递数据 （Props）"></a>6. React 父子组件传递数据 （Props）</h3><p>父传统给子组件数据，单向流动，不能子传递给父</p><p><code>Props</code>的传值 可以为 <code>任意类型</code> 包括 函数。可以传递给父元素的函数，就可以修改父组件的数据。</p><p>实例1： 父组件 -&gt; 子组件的数据传递</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ParentCom</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            isActive <span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>changeActive <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>changeActive<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeActive<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>控制子元素的显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token operator">&lt;</span>ChildCom isActive <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isActive<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">changeActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            isActive <span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isActive        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ChildCom</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> strClass <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isActive<span class="token punctuation">)</span><span class="token punctuation">{</span>            strClass <span class="token operator">=</span> <span class="token string">'active'</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token string">"content "</span><span class="token operator">+</span>strClass<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实例2： 子组件 -&gt; 父组件 的数据传递</p><blockquote><p>这里不像 Vue 这么强大了，调用父元素的 函数 来改变父的状态</p></blockquote><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ParentCom</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            childData <span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>子元素传递给父元素的数据 ： <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>childData<span class="token punctuation">}</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCom</span> <span class="token attr-name">setChildData</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>setChildData<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    setChildData <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            childData <span class="token punctuation">:</span> data<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ChildCom</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            msg <span class="token punctuation">:</span> <span class="token string">'我是子消息'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// => 函数就不需要 .bind(this)</span>    sendData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">setChildData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">setChildData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">></span></span> 传递给父元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7-React-事件"><a href="#7-React-事件" class="headerlink" title="7. React 事件"></a>7. React 事件</h3><ol><li><p>它的事件是以<code>小驼峰命名法</code></p></li><li><p>onClick={ } </p><blockquote><p>React 入参是 对象的时候，它只是代理原生的事件对象，如果想要查看某一属性的值，必须属于完整属性</p></blockquote></li><li><p>阻止默认的 Form 的提交 , 阻止默认 <code>e.preventDefault();</code></p></li></ol><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ParentCom</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token punctuation">}</span>   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentEvent<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>       <span class="token punctuation">)</span>   <span class="token punctuation">}</span>   parentEvent <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 组织跳转到 百度</span>       e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="8-React-条件渲染"><a href="#8-React-条件渲染" class="headerlink" title="8. React 条件渲染"></a>8. React 条件渲染</h3><p><code>实例1：</code>条件渲染是否 登录</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">UserGreet</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>您已经登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">UserLogin</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>请先登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Apps</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            isLogin <span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLogin<span class="token punctuation">)</span><span class="token punctuation">{</span>            element <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserGreet</span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            element <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserLogin</span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> 这是头部 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>第一种<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                        <span class="token punctuation">{</span>element<span class="token punctuation">}</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>第二种<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLogin <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserGreet</span><span class="token punctuation">/></span></span> <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserLogin</span><span class="token punctuation">/></span></span><span class="token punctuation">}</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> 这是尾部 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>实例2</code> 列表的渲染</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里 Java 开发手册 -1.5 华山版</title>
      <link href="/2020/03/11/a-li-ba-ba-dai-ma-gui-fan/"/>
      <url>/2020/03/11/a-li-ba-ba-dai-ma-gui-fan/</url>
      
        <content type="html"><![CDATA[<p>《Java 开发手册》是阿里巴巴集团技术团队的集体智慧结晶和经验总结，经历了多次大规模<br>一线实战的检验及不断完善，公开到业界后，众多社区开发者踊跃参与，共同打磨完善，系统化地<br>整理成册。</p><h2 id="一、编程规约"><a href="#一、编程规约" class="headerlink" title="一、编程规约"></a>一、编程规约</h2><h3 id="（一）命名风格"><a href="#（一）命名风格" class="headerlink" title="（一）命名风格"></a>（一）命名风格</h3><p>1.<font color="red">【强制】</font>代码中的命名均不能以<code>下划线或美元符号</code>开始，也不能以<code>下划线或美元符号</code>结束。</p><blockquote><p>反例：<em>name / __name / $name / name</em> / name$ / name__ </p></blockquote><p>2.<font color="red">【强制】</font> 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 </p><blockquote><p><code>说明：</code>正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。    </p><p><code>正例：</code>renminbi / alibaba / taobao / youku / hangzhou 等国际通用的名称，可视同英文。    </p><p><code>反例：</code>DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后台开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 开发规范 </tag>
            
            <tag> 必备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 编程进阶</title>
      <link href="/2020/03/06/leetcode/"/>
      <url>/2020/03/06/leetcode/</url>
      
        <content type="html"><![CDATA[<p>LeetCode收录了许多互联网公司的算法题目，被称为刷题神器。如果是为了面试，刷Leetcode还是很重要的。一是提高对简单题的熟悉程度，有一些听起来很轻松的题目，比如旋转矩阵，写过一次和没写过的临场表现可能会有很大的差距；二是可以见识一些大家都知道的奇技淫巧，有一些大公司就是喜欢考这种看似很巧妙，但是Leetcode上有原题的套路。</p><h2 id="LeetCode-精选-TOP-面试"><a href="#LeetCode-精选-TOP-面试" class="headerlink" title="LeetCode - 精选 TOP 面试"></a>LeetCode - 精选 TOP 面试</h2><p>以下是 LeetCode 的精选 TOP 面试的题，本节汇总 1 ~ n 的向下去编写。持续更新…….</p><blockquote><p><a href="https://leetcode-cn.com/problemset/top/" target="_blank" rel="noopener">https://leetcode-cn.com/problemset/top/</a></p></blockquote><h3 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、两数之和</h3><h4 id="1-试题详情"><a href="#1-试题详情" class="headerlink" title="(1) 试题详情"></a>(1) 试题详情</h4><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><h4 id="2-试题实例"><a href="#2-试题实例" class="headerlink" title="(2) 试题实例"></a>(2) 试题实例</h4><hr><p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><hr><h4 id="3-试题解决方案"><a href="#3-试题解决方案" class="headerlink" title="(3) 试题解决方案"></a>(3) 试题解决方案</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> f <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>                    result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、反转链表-206"><a href="#2、反转链表-206" class="headerlink" title="2、反转链表 - 206"></a>2、反转链表 - 206</h3><h4 id="1-试题详情-1"><a href="#1-试题详情-1" class="headerlink" title="(1) 试题详情"></a>(1) 试题详情</h4><p><code>跳转到LeetCode</code> <a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">LeetCode-206. 反转链表</a></p><p>给定一个链表，请你反转一个单链表。</p><h4 id="2-试题实例-1"><a href="#2-试题实例-1" class="headerlink" title="(2) 试题实例"></a>(2) 试题实例</h4><hr><pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</code></pre><hr><h4 id="3-试题解决方案-1"><a href="#3-试题解决方案-1" class="headerlink" title="(3) 试题解决方案"></a>(3) 试题解决方案</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 链表反转 * * @author jian.li * @date 2020年 03月06日 15:50:53 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReverseList</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode listNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode newList <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>listNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        newList<span class="token punctuation">.</span><span class="token function">toListString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        ListNode curr <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>curr <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            ListNode next <span class="token operator">=</span>  curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            curr<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> curr<span class="token punctuation">;</span>            curr <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    ListNode next<span class="token punctuation">;</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toListString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>val <span class="token operator">+</span> <span class="token string">" -> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" -> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、用队列实现栈-225"><a href="#3、用队列实现栈-225" class="headerlink" title="3、用队列实现栈 - 225"></a>3、用队列实现栈 - 225</h3><h4 id="1-试题详情-2"><a href="#1-试题详情-2" class="headerlink" title="(1) 试题详情"></a>(1) 试题详情</h4><p><code>跳转到LeetCode</code> <a href="https://leetcode-cn.com/problems/implement-stack-using-queues/" target="_blank" rel="noopener">225. 用队列实现栈</a></p><p>使用队列实现栈的下列操作：</p><ul><li>push(x) – 元素 x 入栈</li><li>pop() – 移除栈顶元素</li><li>top() – 获取栈顶元素</li><li>empty() – 返回栈是否为空</li></ul><p><strong>注意</strong></p><ul><li>你只能使用队列的基本操作– 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。</li><li>你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li><li>你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</li></ul><h4 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="(2) 解决办法"></a>(2) 解决办法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStatckDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyStack myStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Initialize your data structure here. */</span>    <span class="token keyword">public</span> <span class="token function">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** Push element x onto stack. */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** Removes the element on top of the stack and returns that element. */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Integer remove <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            size <span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** Get the top element. */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Integer value <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** Returns whether the stack is empty. */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一步一步跟我学设计模式</title>
      <link href="/2020/03/06/she-ji-mo-shi/"/>
      <url>/2020/03/06/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>设计模式 是前辈积累总结下来的最佳实践技巧，随着我们的开发经验的提高，设计模式成为划分开发水平的标准之一。简单而言：设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><h2 id="第-1-章-什么是设计模式？"><a href="#第-1-章-什么是设计模式？" class="headerlink" title="第 1 章 什么是设计模式？"></a>第 1 章 什么是设计模式？</h2><h3 id="1-1-为什么要学习设计模式？"><a href="#1-1-为什么要学习设计模式？" class="headerlink" title="1.1 为什么要学习设计模式？"></a>1.1 为什么要学习设计模式？</h3><p><strong>设计模式</strong> ( design pattern ) 是对面向对象设计中反复出现的问题的解决方案。这里要注意：算法不是设计模式，因为算法致力于解决问题而非设计问题。设计模式通常描述了一组相互紧密作用的类与对象。它提供一种讨论软件设计的公共语言，使得熟练设计者的设计经验可以被初学者和其他设计者掌握。设计模式还为软件重构提供了目标。 </p><p><strong>总结：</strong> 要想你写出来的大神级别的漂亮代码，具有 <strong>高内聚</strong>、<strong>低耦合</strong>的特点，学好 <strong>设计模式</strong> 是你必须要做的，譬如：要想吃中餐，就要学使用筷子这一技能。</p><h2 id="第-2-章-UML-类图的初步入门"><a href="#第-2-章-UML-类图的初步入门" class="headerlink" title="第 2 章 UML 类图的初步入门"></a>第 2 章 UML 类图的初步入门</h2><h3 id="2-1-什么是-UML-类图"><a href="#2-1-什么是-UML-类图" class="headerlink" title="2.1 什么是 UML 类图"></a>2.1 什么是 UML 类图</h3><p><strong>统一建模语言</strong>（ Unified Modeling Language，UML ）又称标准建模语言，是始于 1997 年的一个 OMG 标准，它是一个支持模型化和软件系统开发的图形化语言，为软件开发的所有阶段提供模型化和可视化支持，包括由需求分析到规格，到构造和配置。</p><h3 id="2-2-UML-的分类"><a href="#2-2-UML-的分类" class="headerlink" title="2.2  UML 的分类"></a>2.2  UML 的分类</h3><p>UML 从考虑系统的不同角度出发，定义了 <strong>用况图</strong>、<strong>类图</strong>、<strong>对象图</strong>、<strong>包图</strong>、<strong>状态图</strong>、<strong>活动图</strong>、<strong>序列图</strong>、<strong>通信图</strong>、<strong>构件图</strong>、<strong>部署图</strong> 等10种图。在这这里我们通过 <strong>UML 的类图</strong> 的学习可以快速方便我们更好的入门和掌握设计模式。<br>其他种类的 UML 图请自行问 谷歌哥哥，百度姐姐。</p><h3 id="2-3-UML-类图初步入门"><a href="#2-3-UML-类图初步入门" class="headerlink" title="2.3 UML 类图初步入门"></a>2.3 UML 类图初步入门</h3><p><strong>什么是UML 类图？</strong><br>回答：用于表示类、接口、实例等之间相互静态关系的图。<br><img src="https://images.gitbook.cn/4f9e1f40-4667-11ea-b5fc-c30e6f2b5954" alt="在这里插入图片描述"><br>|      | 归纳 |<br>|:———-:| :————-:|<br>| 第 1 点 |  <strong>Student</strong> 表示类名，<strong><em>Student</em></strong>  斜体表示抽象类，类上方加 &lt;&lt;<strong>interface</strong>&gt;&gt; 表示接口 |<br>| 第 2 点 | <strong>+</strong> 代表 <strong>public</strong> ;  <strong>-</strong> 代表  <strong>private</strong> ;  <strong>#</strong> 代表 <strong>protected</strong> ;  <strong>~</strong>  代表 <strong>default</strong>  |<br>|  第 3 点 | 属性或者方法下面加横线表示 <strong>static</strong>  |<br>|  第 4 点 | 方法 <em>study()</em> 为斜体，表示为抽象方法。   |</p><h4 id="2-3-1-继承或者实现"><a href="#2-3-1-继承或者实现" class="headerlink" title="2.3.1 继承或者实现"></a>2.3.1 继承或者实现</h4><blockquote><p>UML 箭头方向：从子类指向父类</p></blockquote><p>类的继承和实现 UML 图：<strong>实线 | 虚线 + 空心三角箭头</strong>。</p><ol><li><strong>实线</strong> 代表的是继承 ( extends ) 关系，它是 is - a 的关系。</li><li><strong>虚线</strong> 代表的是实现 (implements) 的关系，它是 can - do 的关系</li><li><strong>空心三角箭头</strong>：继承或者实现,如下图红框所示。<br><img src="https://images.gitbook.cn/0a944120-4669-11ea-8bef-d7e4fe1dc66a" alt="在这里插入图片描述"></li></ol><h4 id="2-3-2-关联与依赖"><a href="#2-3-2-关联与依赖" class="headerlink" title="2.3.2 关联与依赖"></a>2.3.2 关联与依赖</h4><p>注意此时的箭头不同于空心三角形。 箭头方向指向被依赖或者被关联的对象。<br>1、<strong>实线 代表 关联关系：</strong> 表示一个类对象和另外一个类对象有关联通常是一个类中有另一个类对象作为属性<br>2、<strong>虚线 代表 依赖关系：</strong> 表示一种使用关系，一个类需要借助另一个类来实现功能，一般是一个类使用另一个类作为入参或者返回值，只有调用某个方法时才会使用<br><img src="https://images.gitbook.cn/87c13cc0-4669-11ea-814b-0d3e32b9c16f" alt="在这里插入图片描述"></p><h4 id="2-3-3-组合与聚合"><a href="#2-3-3-组合与聚合" class="headerlink" title="2.3.3 组合与聚合"></a>2.3.3 组合与聚合</h4><p>1、<strong>实心菱形 代表 组合关系：</strong> 强关系（鸟和翅膀），组合在一起，箭头指的是组件（翅膀），两者拥有相同的生命周期，contains-a的关系，为强关系。<br>2、<strong>空心菱形 代表 聚合关系：</strong> 相同的东西聚在一起（大雁群和大雁的关系），箭头所指的类为个体（大雁），整体和局部的关系，二者具体独立的生命周期，has-a的关系，为弱关系。<br><img src="https://images.gitbook.cn/1c519dd0-466a-11ea-8bef-d7e4fe1dc66a" alt="在这里插入图片描述"><br>本节最后，以动物为例，附带一张 UML 完整的类图。图片来源于：&lt;&lt;大话设计模式&gt;&gt;<br><img src="https://images.gitbook.cn/55318d90-466a-11ea-8bef-d7e4fe1dc66a" alt="在这里插入图片描述"></p><h2 id="第-3-章-设计模式的分类"><a href="#第-3-章-设计模式的分类" class="headerlink" title="第 3 章 设计模式的分类"></a>第 3 章 设计模式的分类</h2><p>接下来，通过两张图片大致看一下设计模式的几种类型，以及设计模式之间的关系。<br><img src="https://images.gitbook.cn/408de870-4ccd-11ea-9f6e-1bdc6229ab3f" alt="在这里插入图片描述"><br><img src="https://images.gitbook.cn/42fe2fb0-4cce-11ea-8823-b14c07bf0c6c" alt="设计模式之间的关系"><br>言归正传，从本章开始，跟着我的脚步，一步一步学习设计模式。</p><h3 id="3-1-单例模式"><a href="#3-1-单例模式" class="headerlink" title="3.1 单例模式"></a>3.1 单例模式</h3><h4 id="3-1-1-什么是单例？"><a href="#3-1-1-什么是单例？" class="headerlink" title="3.1.1 什么是单例？"></a>3.1.1 <strong>什么是单例？</strong></h4><p><strong>单例模式</strong> 属于创建类型的一种常用的软件设计模式。也叫单态模式，是 java 程序员面试常问的设计模式之一。单例模式在整个程序的运行中只允许有一个类的实例，不管 new 多少次，它总是相等的。</p><h4 id="3-1-2-单例模式的常用的应用场景"><a href="#3-1-2-单例模式的常用的应用场景" class="headerlink" title="3.1.2 单例模式的常用的应用场景"></a>3.1.2 <strong>单例模式的常用的应用场景</strong></h4><p>a、需要频繁实例化然后销毁的对象。<br>b、创建对象是耗时过多或者消耗资源过多，但程序还经常用到的对象。</p><h4 id="3-1-3-单例模式的实现步骤"><a href="#3-1-3-单例模式的实现步骤" class="headerlink" title="3.1.3 单例模式的实现步骤"></a>3.1.3 <strong>单例模式的实现步骤</strong></h4><ul><li>类的构造方法必须进行私有化，不对外开放。构造函数访问修饰符为 <strong>private</strong> 。</li><li>对象实例必须是一个而且是唯一一个，类必须加上 <strong>static</strong> 修饰。</li><li>类对外应需提供获取该类实例的公有方法，方法必须也是 <strong>static</strong> 修饰。</li></ul><h4 id="3-1-4-单例模式的实现方式"><a href="#3-1-4-单例模式的实现方式" class="headerlink" title="3.1.4 单例模式的实现方式"></a>3.1.4 <strong>单例模式的实现方式</strong></h4><p><img src="https://images.gitbook.cn/c4e776b0-4cd5-11ea-bb35-2725b4649300" alt="在这里插入图片描述"><br><strong>第 1 种：饿汉式</strong><br><img src="https://images.gitbook.cn/7f7ad490-4cd6-11ea-a325-5b2189984a9b" alt="在这里插入图片描述"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonDemo1 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Singleton1 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>巧记</strong> ：我很饿，我想吃的时候，你已经给我做好准备让我吃了。<br><strong>不足：</strong> 不能延迟加载。一上来就实例化对象，如果程序从不调用它，资源上的浪费</p><p><strong>第 2 种：懒汉式</strong><br><img src="https://images.gitbook.cn/54386290-4ce3-11ea-bb35-2725b4649300" alt="在这里插入图片描述"><br>线程不安全的懒汉式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SD2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类初始化时，不初始化这个对象(延时加载，真正用的时候再创建)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SD2 instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SD2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SD2 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里会出现线程不安全,解决方法 同步代码块 或者 同步方法。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SD2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以同步方法实现懒汉式线程安全为例，代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SD2Syn</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SD2Syn instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SD2Syn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> synchronized SD2Syn <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SD2Syn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>巧记</strong> ：我很懒，我先拖着，需要的时候再弄吧。</p><p><strong>第 3 种：双重锁判断机制 DCL</strong> 不建议使用<br><img src="https://images.gitbook.cn/423235b0-4ce5-11ea-a2a8-bf3f3a718133" alt="在这里插入图片描述"><br>因为存在指令重排的问题，所以这里实例必须为 <strong>volatile</strong> 避免指令重排。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SD3</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> volatile <span class="token keyword">static</span> SD3 instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SD3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SD3 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            synchronized <span class="token punctuation">(</span>SD3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SD3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>巧记</strong> ：它就是懒加载的升级版，双重验证 + volatile 。<br><strong>不足</strong> ：使用的时候需要加 volatile ，以免造成虚拟机的指令重排而导致失败。</p><p><strong>第 4 种：静态内部类</strong>  推荐建议<br><img src="https://images.gitbook.cn/95fbaef0-4ce6-11ea-9aca-f5e54cebdcef" alt="在这里插入图片描述"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SD4</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">SD4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> SD4 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder4<span class="token punctuation">.</span>SINGLETON<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder4</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> final SD4 SINGLETON <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SD4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>不足</strong> ：它已经是最完美了，如果非要鸡蛋里挑骨头的话，那就是不能防止反射或者反序列化的调用。</p><p><strong>第 5 种：枚举类</strong><br>枚举类是 Java 之父 写出来的一种单例模式。默认枚举实例的创建时线程安全的，且在任何一种情况下它都是单例的，所以它很好的防止反序列化或者反射的调用。<br><img src="https://images.gitbook.cn/61973fc0-4ce7-11ea-bb35-2725b4649300" alt="在这里插入图片描述"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">enum</span> SD5 <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> SD5 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>不足</strong> ：它不能延迟加载。</p><hr><p><strong>总结：</strong><br><img src="https://images.gitbook.cn/faeffe50-4ce7-11ea-aeb5-6d255c028296" alt="在这里插入图片描述"><br>条件     | 结果<br>——– | —–<br>单例对象 占用资源少，不需要延时加载  | 枚举 &gt; 饿汉<br>单例对象 占用资源多，需要延时加载  | 静态内部类 &gt; 懒汉式</p><h3 id="3-2-工厂模式"><a href="#3-2-工厂模式" class="headerlink" title="3.2 工厂模式"></a>3.2 工厂模式</h3><p>本博客采用 Java 语言实现相关的工厂代码。<br><img src="https://images.gitbook.cn/507ae130-4cea-11ea-bb27-bdb4967fc6e0" alt="在这里插入图片描述"></p><h4 id="3-2-1-简单工厂模式"><a href="#3-2-1-简单工厂模式" class="headerlink" title="3.2.1 简单工厂模式"></a>3.2.1 简单工厂模式</h4><blockquote><p>简单工厂并不属于 23 中常用模式。</p></blockquote><p><strong>什么是简单工厂？</strong><br>简单工厂模式属于创建型模式，又叫做静态工厂方法模式。它来负责创建其他类的实例，被创建的实例通常都具有共同的父类。简而言之，简单工厂模式就是一个专门生产某产品的类。比如：富士康造手机，伊利奶厂造不同型号的奶等等。<br><img src="https://images.gitbook.cn/1bec1350-466c-11ea-b5fc-c30e6f2b5954" alt="在这里插入图片描述"><strong>简单工厂的代码实现</strong></p><blockquote><p>例子：以手机制造为例，富士康就是我们的手机工厂，<br>它可以根据传入代号或者型号来分别生产Phone、HuaWei等手机。</p></blockquote><ol><li><p>定义手机抽象类。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> abstract <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> abstract <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><p>各大手机制造商制造他们手机的流程步骤。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplePhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>@Override<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我被制造出来了！我是苹果手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaWeiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>@Override<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我被制造出来了！我是华为手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OppoPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>@Override<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我被制造出来了！我是Oppo手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>定义一个手机制造工厂，比如富士康一样的公司工厂。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactory</span> <span class="token comment" spellcheck="true">/*** 第一种：这里是通过 if-else 实现的简单工厂模式*/</span><span class="token keyword">public</span> Phone <span class="token function">create</span><span class="token punctuation">(</span>int type<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApplePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OppoPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 第二种：这里也可以通过反射实现的简单工厂 推荐使用*/</span><span class="token keyword">public</span> Phone <span class="token function">create</span><span class="token punctuation">(</span>Class <span class="token class-name">clazz</span><span class="token punctuation">)</span><span class="token punctuation">{</span> Phone phone <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      phone <span class="token operator">=</span> <span class="token punctuation">(</span>Phone<span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> phone<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后，工厂制造的过程（客户端调用）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  PhoneFactory phoneFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 通过 if-else 实现的简单工厂模式 */</span>  Phone phone <span class="token operator">=</span> phoneFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  phone<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* class 通过反射 实现的简单工厂 */</span>  Phone phone1 <span class="token operator">=</span> phoneFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>OppoPhone<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  phone1<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol></li></ol><pre><code>通过实例去分析：**简单工厂模式的缺点在于**：当每次新增一个手机新品牌的时候，我们必须在要修改工厂类的生产方法，在工厂类中增加对应的判断分支，所以这样违背了我们所说的 **开放封闭原则**。&gt;开放封闭原则（OCP，Open Closed Principle）是所有面向对象原则的核心。软件设计本身所追求的目标就是封装变化、降低耦合，而开放封闭原则正是对这一目标的最直接体现。**总结：** ![简单工厂的总结](https://images.gitbook.cn/d38b8370-4cec-11ea-bea2-9fad8905a8df)#### 3.2.2 工厂方法模式&gt;工厂方法模式 是解决 简单工厂模式 违背 **开放封闭原则** 问题的一种解决方式。这里以 **加减乘除** 运算为例来实现一个运算工厂1. 首先，定义一个运算的接口。```javascriptpublic interface Operation {    double result(double firstNum,double secondNum) throws Exception;}</code></pre><p>2.分别创建加减乘除类从而实现加减乘除的运算功能。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 加法实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddNum</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    @Override    <span class="token keyword">public</span> double <span class="token function">result</span><span class="token punctuation">(</span>double firstNum<span class="token punctuation">,</span>double secondNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> firstNum <span class="token operator">+</span> secondNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 减法实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubNum</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    @Override    <span class="token keyword">public</span> double <span class="token function">result</span><span class="token punctuation">(</span>double firstNum<span class="token punctuation">,</span>double secondNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> firstNum <span class="token operator">-</span> secondNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 乘法实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MulNum</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    @Override    <span class="token keyword">public</span> double <span class="token function">result</span><span class="token punctuation">(</span>double firstNum<span class="token punctuation">,</span>double secondNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> firstNum <span class="token operator">*</span> secondNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>除法相关</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 除法实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DivNum</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    @Override    <span class="token keyword">public</span> double <span class="token function">result</span><span class="token punctuation">(</span>double firstNum<span class="token punctuation">,</span>double secondNum<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>secondNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"除数不能为0！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> firstNum <span class="token operator">/</span> secondNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>分别对 加减乘除 工厂类的实现 </li></ol><p>步骤：定义工厂接口，创建 加减乘除 四个工厂实现方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 定义工厂接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OperationFactory</span> <span class="token punctuation">{</span>    Operation <span class="token function">initOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 加法工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddFactory</span> <span class="token keyword">implements</span> <span class="token class-name">OperationFactory</span> <span class="token punctuation">{</span>    @Override    <span class="token keyword">public</span> Operation <span class="token function">initOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AddNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 减法工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubFactory</span> <span class="token keyword">implements</span> <span class="token class-name">OperationFactory</span> <span class="token punctuation">{</span>    @Override    <span class="token keyword">public</span> Operation <span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SubNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>客户端调用</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            OperationFactory addFactory <span class="token operator">=</span> <span class="token punctuation">(</span>OperationFactory<span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>AddFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Operation operation <span class="token operator">=</span> addFactory<span class="token punctuation">.</span><span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            double result <span class="token operator">=</span> operation<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-3-抽象工厂的实现"><a href="#3-2-3-抽象工厂的实现" class="headerlink" title="3.2.3 抽象工厂的实现"></a>3.2.3 <strong>抽象工厂的实现</strong></h4><p>工厂方法模式是工厂只生产一种产品，就是 OperationFactory 接口只有一个抽象方法， 当工厂生产至少 2 种产品的话，那么此工厂成为 抽象工厂。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CreateFactory</span> <span class="token punctuation">{</span>    Phone <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    Pad <span class="token function">cratePad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>总结：</strong><br><img src="https://images.gitbook.cn/8eafa700-4d9a-11ea-a221-c1e42d9b4512" alt="在这里插入图片描述"></p><h4 id="3-2-4-工厂模式与抽象工厂模式不同点"><a href="#3-2-4-工厂模式与抽象工厂模式不同点" class="headerlink" title="3.2.4 工厂模式与抽象工厂模式不同点"></a>3.2.4 工厂模式与抽象工厂模式不同点</h4><p><img src="https://images.gitbook.cn/f7803ba0-4d9a-11ea-a2a8-bf3f3a718133" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200106143150629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYW5saTk1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-2-5-举例子加深印象"><a href="#3-2-5-举例子加深印象" class="headerlink" title="3.2.5 举例子加深印象"></a>3.2.5 举例子加深印象</h4><p>本例子以种菜为例，详细看下图的UML图。<br><strong>简单工厂模式UML图</strong><br><img src="https://images.gitbook.cn/4a101910-466d-11ea-936b-cfa88a589a44" alt="在这里插入图片描述"><br><strong>工厂方法模式UML图</strong><br><img src="https://images.gitbook.cn/502eb7c0-466d-11ea-895e-2fe851c47874" alt="在这里插入图片描述"><br><strong>抽象工厂方法UML图</strong><br><img src="https://images.gitbook.cn/58b2e4c0-466d-11ea-815b-99042f14883a" alt="在这里插入图片描述"><br>在CSDN还看到一篇很好的例子：<a href="https://blog.csdn.net/u013759988/article/details/82383077" target="_blank" rel="noopener">饺子-包子设计模式</a></p><h3 id="3-3-原型模式"><a href="#3-3-原型模式" class="headerlink" title="3.3 原型模式"></a>3.3 原型模式</h3><p><strong>什么是原型（Prototype）模式？</strong> </p><p><strong>原型模式：</strong>   用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。就是我们所理解的 <strong>克隆</strong> 对象。用这种方式创建对象非常高效，根本无须知道对象创建的细节。如果创建一个新的对象，消耗的时间是相对长的，不如我们可以用原型模式，然后对对象进行复制。</p><p><strong>大致步骤讲解：</strong><br>先 <strong>实现 Cloneable 接口</strong>  后 <strong>重写 clone() 方法</strong> 。</p><blockquote><p>原型模式的克隆分为 <strong>浅克隆</strong> 和 <strong>深克隆</strong>，Java 中的 Object 类提供了浅克隆的 clone() 方法，具体原型类只要实现 Cloneable 接口就可实现对象的浅克隆，这里的 Cloneable 接口就是抽象原型类。其代码如下：</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Draw</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span>  <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我已经画好了《蒙娜丽莎》。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端调用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws CloneNotSupportedException <span class="token punctuation">{</span>        Draw draw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Draw clone <span class="token operator">=</span> <span class="token punctuation">(</span>Draw<span class="token punctuation">)</span> draw<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两个对象是否相同："</span><span class="token operator">+</span><span class="token punctuation">(</span>draw <span class="token operator">==</span> clone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://images.gitbook.cn/b0efda30-466d-11ea-936b-cfa88a589a44" alt="在这里插入图片描述"><br><strong>注意：</strong> 原型模式 克隆后的对象与原来对象 <strong>不相同</strong>，默认为 <strong>浅克隆</strong>，<strong>深克隆</strong> 请重写 clone() 方法。</p><h3 id="3-4-建造者模式"><a href="#3-4-建造者模式" class="headerlink" title="3.4 建造者模式"></a>3.4 建造者模式</h3><h4 id="3-4-1-什么是建造者模式？"><a href="#3-4-1-什么是建造者模式？" class="headerlink" title="3.4.1 什么是建造者模式？"></a>3.4.1 什么是建造者模式？</h4><p>将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。例如电脑组装相关，房子布局等。</p><h4 id="3-4-2-建造者中相关的角色"><a href="#3-4-2-建造者中相关的角色" class="headerlink" title="3.4.2 建造者中相关的角色"></a>3.4.2 建造者中相关的角色</h4><ol><li>建造者（Builder）：为创建一个产品对象的各个部件指定抽象接口。</li><li>具体建造者（ConcreteBuilder）：实现Builder的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，并 提供一个检索产品的接口。</li><li>指挥者（Director）：指挥并构造一个使用Builder接口的对象。</li><li>产品（Product）：表示被构造的复杂对象。ConcreteBuilder创建该产品的内部表示并定义它的装配过程，包含定义组成部件的类，包括将这些部件装配成最终产品的接口。</li></ol><h4 id="3-4-3-建造者相关代码的实现"><a href="#3-4-3-建造者相关代码的实现" class="headerlink" title="3.4.3 建造者相关代码的实现"></a>3.4.3 建造者相关代码的实现</h4><blockquote><p>本文以 <strong>组装计算机</strong> 为例,</p></blockquote><p><strong>1.编写产品</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @author jian.li * @date 2020年 01月06日 16:09:36 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* CPU的型号 */</span>    <span class="token keyword">private</span> String CPU<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*  固态的型号 */</span>    <span class="token keyword">private</span> String SSD<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 内存型号 */</span>    <span class="token keyword">private</span> String RAM<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 硬盘型号 */</span>    <span class="token keyword">private</span> String ROM<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// getter or setter 已经省略</span>    @Override    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我组装了一个电脑，配置如下：{CPU='"</span> <span class="token operator">+</span> CPU <span class="token operator">+</span> <span class="token string">", SSD='"</span> <span class="token operator">+</span> SSD <span class="token operator">+</span> <span class="token string">", RAM='"</span> <span class="token operator">+</span> RAM <span class="token operator">+</span> <span class="token string">", ROM='"</span> <span class="token operator">+</span> ROM <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>2.建造者的代码</strong> 建造者为抽象类， 里面包括 computer 属性，并提供相关的组装计算机的抽象方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @author jian.li * @date 2020年 01月06日 16:17:10 */</span><span class="token keyword">public</span> abstract <span class="token keyword">class</span> <span class="token class-name">ComputerBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 组装CPU */</span>    <span class="token keyword">public</span> abstract <span class="token keyword">void</span> <span class="token function">CPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 组装固态硬盘 */</span>    <span class="token keyword">public</span> abstract <span class="token keyword">void</span> <span class="token function">SSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 组装内存 */</span>    <span class="token keyword">public</span> abstract <span class="token keyword">void</span> <span class="token function">RAM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 组装硬盘 */</span>    <span class="token keyword">public</span> abstract <span class="token keyword">void</span> <span class="token function">ROM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Computer <span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> computer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>3.具体建造者</strong> 这里只记录建造的步骤过程</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerConcreteBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">ComputerBuilder</span> <span class="token punctuation">{</span>    @Override    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">CPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span><span class="token function">setCPU</span><span class="token punctuation">(</span><span class="token string">"Intel I7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span><span class="token function">setSSD</span><span class="token punctuation">(</span><span class="token string">"三星固态硬盘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RAM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span><span class="token function">setRAM</span><span class="token punctuation">(</span><span class="token string">"8G内存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ROM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computer<span class="token punctuation">.</span><span class="token function">setROM</span><span class="token punctuation">(</span><span class="token string">"1T硬盘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4. 指挥者 也就是 我们组装人</strong> 需要获取到 <strong>具体建造者</strong> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @author jian.li * @date 2020年 01月06日 16:25:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerDirector</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取当前建造者的指挥权</span>    <span class="token keyword">private</span> ComputerBuilder computerBuilder<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法，直接获取建造者对象</span>    <span class="token keyword">public</span> <span class="token function">ComputerDirector</span><span class="token punctuation">(</span>ComputerBuilder computerBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computerBuilder <span class="token operator">=</span> computerBuilder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//指挥组装</span>    <span class="token keyword">public</span> Computer <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       computerBuilder<span class="token punctuation">.</span><span class="token function">CPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       computerBuilder<span class="token punctuation">.</span><span class="token function">RAM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       computerBuilder<span class="token punctuation">.</span><span class="token function">ROM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       computerBuilder<span class="token punctuation">.</span><span class="token function">SSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> computerBuilder<span class="token punctuation">.</span><span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>5. 客户端调用</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @author jian.li * @date 2020年 01月06日 16:27:51 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ComputerBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerConcreteBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ComputerDirector computerDirector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerDirector</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        Computer construct <span class="token operator">=</span> computerDirector<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>construct<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://images.gitbook.cn/2606fb00-466e-11ea-815b-99042f14883a" alt="在这里插入图片描述"></p><h3 id="3-5-适配器模式"><a href="#3-5-适配器模式" class="headerlink" title="3.5 适配器模式"></a>3.5 适配器模式</h3><p><strong>适配器模式有分三类：</strong><br>1、类适配器模式（class adapter pattern）<br>2、对象适配器模式（object adapter pattern）<br>3、缺省适配器模式（default adapter pattern），也叫默认适配器模式、接口适配器模式</p><p><strong>角色：</strong><br>1、目标角色（target）：这是客户锁期待的接口。目标可以是具体的或抽象的类，也可以是接口<br>2、适配者角色（adaptee）：已有接口，但是和客户器期待的接口不兼容。<br>3、适配器角色（adapter）：将已有接口转换成目标接口。</p><h4 id="3-5-1-类适配器模式"><a href="#3-5-1-类适配器模式" class="headerlink" title="3.5.1 类适配器模式"></a>3.5.1 类适配器模式</h4><p><img src="https://images.gitbook.cn/75f63cc0-466e-11ea-8b8f-9189e02bc105" alt="在这里插入图片描述"><br>如上图，因为java没有类多继承，所以只能实现Target接口，而且Target只能是接口。Adapter实现了Target接口，继承了Adaptee类，Target.operation()实现为Adaptee.specificOperation()。<br><strong>需要适配的适配者：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PowerAdaptee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> int output <span class="token operator">=</span> <span class="token number">220</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> int <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电源输出电压："</span><span class="token operator">+</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> output<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>定义适配接口 220V - 5V 接口转换</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @author jian.li * @date 2020年 01月07日 14:02:26 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PowerTarget</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> int <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>转换过程</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @author jian.li * @date 2020年 01月07日 14:05:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PowerAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">PowerAdaptee</span> <span class="token keyword">implements</span> <span class="token class-name">PowerTarget</span> <span class="token punctuation">{</span>    @Override    <span class="token keyword">public</span> int <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        int output <span class="token operator">=</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电源适配器开始工作，此时输出电压是："</span> <span class="token operator">+</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>        output <span class="token operator">=</span> output <span class="token operator">/</span> <span class="token number">44</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电源适配器工作完成，此时输出电压是："</span> <span class="token operator">+</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> output<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>客户端调用</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @author jian.li * @date 2020年 01月07日 16:18:20 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PowerTarget powerTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PowerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        powerTarget<span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-5-2-对象适配器"><a href="#3-5-2-对象适配器" class="headerlink" title="3.5.2 对象适配器"></a>3.5.2 对象适配器</h4><p>对象适配器与类适配器不同之处在于，类适配器通过继承来完成适配，对象适配器则是通过关联来完成，这里稍微修改一下 Adapter 类即可将转变为对象适配器。转化过程如下所示</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @author jian.li * @date 2020年 01月07日 14:05:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PowerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">PowerTarget</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> PowerAdaptee powerAdaptee<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PowerAdapter</span><span class="token punctuation">(</span>PowerAdaptee powerAdaptee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>powerAdaptee <span class="token operator">=</span> powerAdaptee<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    <span class="token keyword">public</span> int <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        int output <span class="token operator">=</span> powerAdaptee<span class="token punctuation">.</span><span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电源适配器开始工作，此时输出电压是："</span> <span class="token operator">+</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>        output <span class="token operator">=</span> output <span class="token operator">/</span> <span class="token number">44</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电源适配器工作完成，此时输出电压是："</span> <span class="token operator">+</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> output<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://images.gitbook.cn/94c421d0-466e-11ea-815b-99042f14883a" alt="在这里插入图片描述"></p><h4 id="3-5-3-缺省适配器模式（default-adapter-pattern）"><a href="#3-5-3-缺省适配器模式（default-adapter-pattern）" class="headerlink" title="3.5.3 缺省适配器模式（default adapter pattern）"></a>3.5.3 缺省适配器模式（default adapter pattern）</h4><p>当不需要全部实现接口提供的方法时，可以设计一个适配器抽象类实现接口，并为接口中的每个方法提供默认方法，抽象类的子类就可以有选择的覆盖父类的某些方法实现需求，它适用于一个接口不想使用所有的方法的情况。在java8后，接口中可以有default方法，就不需要这种缺省适配器模式了。接口中方法都设置为default，实现为空，这样同样同样可以达到缺省适配器模式同样的效果。<br><img src="https://images.gitbook.cn/a7850140-466e-11ea-b539-4302b67c89d7" alt="在这里插入图片描述"><br>目标角色</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SampleOperation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> abstract <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> abstract <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> abstract <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> abstract <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> abstract <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>适配器角色</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> abstract <span class="token keyword">class</span> <span class="token class-name">DefaultAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">SampleOperation</span><span class="token punctuation">{</span>    @Override    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @Override    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @Override    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @Override    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @Override    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个是测试缺省适配器模式需要用到的类（Operator.java）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Operator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SampleOperation sampleOperation<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOperation</span><span class="token punctuation">(</span>SampleOperation sampleOperation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sampleOperation <span class="token operator">=</span> sampleOperation<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sampleOperation<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sampleOperation<span class="token punctuation">.</span><span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sampleOperation<span class="token punctuation">.</span><span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sampleOperation<span class="token punctuation">.</span><span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sampleOperation<span class="token punctuation">.</span><span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAdapterTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、原来要实现所有操作类的操作</span>        Operator operator1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operator1<span class="token punctuation">.</span><span class="token function">addOperation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SampleOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            @Override            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            @Override            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            @Override            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            @Override            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            @Override            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operator1<span class="token punctuation">.</span><span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、使用缺省适配器只需要实现需要用到的接口方法</span>        Operator operator2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operator2<span class="token punctuation">.</span><span class="token function">addOperation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            @Override            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operator2<span class="token punctuation">.</span><span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-5-4-总结"><a href="#3-5-4-总结" class="headerlink" title="3.5.4 总结"></a>3.5.4 总结</h4><p>本文主要介绍了三种适配器模式，本质上是现有的不兼容的接口转换为需要的接口。</p><ul><li>类适配器模式，以继承现有类的方式转换。</li><li>对象适配器模式，以聚合对象实例的方式转换。</li><li>接口适配器模式，以实现接口的方式转换。</li></ul><p>适配器模式是在现有的类和系统都不易修改的情况下使用，在系统设计之初慎用适配器模式。</p><h3 id="3-6-代理模式"><a href="#3-6-代理模式" class="headerlink" title="3.6 代理模式"></a>3.6 代理模式</h3><p><strong>什么是代理模式？</strong><br>为其他对象提供一种代理，以控制对这个对象的访问。类似于中介商、12306 网站等。<br>代理对象在 <strong>客户端</strong> 和 <strong>目标对象</strong> 之间起到中介的作用。<strong>例如：</strong> 我们租房子为例，房东就是我们的目标对象，合同草拟、水电的结算等都是代理对象来做的，也就是中介，我们我们客户端跟代理类接触，<strong>代理类同时也增强了 目标对象 的功能</strong>。<br><img src="https://images.gitbook.cn/3f41a660-4d9e-11ea-bb35-2725b4649300" alt="在这里插入图片描述"></p><h4 id="3-6-1-代理模式的适用场景和优点"><a href="#3-6-1-代理模式的适用场景和优点" class="headerlink" title="3.6.1 代理模式的适用场景和优点"></a>3.6.1 代理模式的适用场景和优点</h4><ol><li>保护目标对象</li><li>增强目标对象</li></ol><p>以租房为例，我们与中介交流，基本见不到房东，对房东的一种保护。同时也可抽象理解中介的存在间接的增强了房东的向外租房能力。<br><strong>代理模式</strong> 的优缺点如下图所示：<br><img src="https://images.gitbook.cn/d9ed2e40-4d9f-11ea-bb35-2725b4649300" alt="在这里插入图片描述"></p><h4 id="3-6-2-代理模式的代码实现"><a href="#3-6-2-代理模式的代码实现" class="headerlink" title="3.6.2 代理模式的代码实现"></a>3.6.2 代理模式的代码实现</h4><p><img src="https://images.gitbook.cn/bc366910-4da0-11ea-a325-5b2189984a9b" alt="在这里插入图片描述"><br> <strong>举例：</strong> 这里我们以 <strong>订单的分库保存</strong> 为例。根据订单的末尾数与 2 取模，把该订单保存到相应的库中。<br> 前提：以 MVC 模式，创建 订单实体、订单Dao、订单Service。</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">/** * 订单实体类 * @author lijian */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** 订单信息 */</span>    <span class="token keyword">private</span> Object orderInfo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 订单 用户Id */</span>    <span class="token keyword">private</span> Integer userId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// getter setter 省略</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">/** * 订单 Dao 层 * @author lijian */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IOrderDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderDao</span> <span class="token punctuation">{</span>    @Override    <span class="token keyword">public</span> int <span class="token function">insert</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向数据库中添加一条订单成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IOrderDao</span><span class="token punctuation">{</span>    int <span class="token function">insert</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">/** * 订单 Service 层 * @author lijian */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IOrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderService</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> IOrderDao iOrderDao<span class="token punctuation">;</span>    @Override    <span class="token keyword">public</span> int <span class="token function">saveOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Spring 中 通过 @Autowire 自动注入，这里我们直接 new 了</span>        iOrderDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IOrderDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> iOrderDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IOrderService</span> <span class="token punctuation">{</span>    int <span class="token function">saveOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> <strong>代理模式第一种  —— 静态代理</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * OrderService 的 静态代理类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceStaticProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderService</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> IOrderService iOrderService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OrderServiceStaticProxy</span><span class="token punctuation">(</span>IOrderService iOrderService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iOrderService <span class="token operator">=</span> iOrderService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    <span class="token keyword">public</span> int <span class="token function">saveOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 增强 之前做什么</span>        <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iOrderService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IOrderServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int userId <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int dbRouter <span class="token operator">=</span> userId <span class="token operator">%</span> <span class="token number">2</span> <span class="token punctuation">;</span>        int result <span class="token operator">=</span> iOrderService<span class="token punctuation">.</span><span class="token function">saveOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 增强 之后做什么</span>        <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>模拟 Controller 层静态代理的使用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 模拟Controller * @author jian.li * @date 2020年 01月07日 17:03:57 */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IOrderService iOrderService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般是 @Autowire</span>        iOrderService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IOrderServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OrderServiceStaticProxy orderServiceStaticProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderServiceStaticProxy</span><span class="token punctuation">(</span>iOrderService<span class="token punctuation">)</span><span class="token punctuation">;</span>        int result <span class="token operator">=</span> orderServiceStaticProxy<span class="token punctuation">.</span><span class="token function">saveOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>静态代理总结:<br><img src="https://images.gitbook.cn/60ff8800-4db5-11ea-9765-e162b5bc6395" alt="在这里插入图片描述"><br> <strong>代理模式第二种  —— 动态代理</strong></p><p><strong>动态代理</strong> 是利用 JDK 的API中的 Proxy 类实现的，通过反射动态的在内存中构建代理对象。</p><p><img src="https://images.gitbook.cn/2fb1adc0-4e5d-11ea-8532-814baa40f153" alt="在这里插入图片描述"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// java.lang.reflect.Proxy</span><span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>InvocationHandler h <span class="token punctuation">)</span></code></pre><p>注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为:<br><img src="https://images.gitbook.cn/dc22e1a0-4e5d-11ea-a2fb-85c45bbaa11c" alt="在这里插入图片描述"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 创建动态的代理对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceDynamicProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IOrderService iOrderService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OrderServiceDynamicProxy</span><span class="token punctuation">(</span>IOrderService iOrderService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iOrderService <span class="token operator">=</span> iOrderService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Object object <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>iOrderService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                iOrderService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    @Override                    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws Throwable <span class="token punctuation">{</span>                        <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//运用反射执行目标对象方法</span>                        Object returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>iOrderService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>模拟 Controller 层动态代理的使用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppController2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IOrderService iOrderService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般是 @Autowire</span>        iOrderService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IOrderServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OrderServiceDynamicProxy orderServiceDynamicProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderServiceDynamicProxy</span><span class="token punctuation">(</span>iOrderService<span class="token punctuation">)</span><span class="token punctuation">;</span>        IOrderService proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span>IOrderService<span class="token punctuation">)</span> orderServiceDynamicProxy<span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int result <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">saveOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> <strong>代理模式第三种  —— Cglib代理(基于继承的方式实现)</strong><br>　　<br>实现静态或者动态代理的要求目标对象必须实现接口。但是往往有些类，它是单独存在的，他没有继承任何抽象类或者实现任何接口。如果单一对象想要实现代理模式的话。这种就是第三种代理模式—— <strong>Cglib代理</strong>。<br><img src="https://images.gitbook.cn/8ebab890-4e60-11ea-a2fb-85c45bbaa11c" alt="在这里插入图片描述"><br>话不多说，我们码起来，还是以订单为例。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 目标对象,没有实现任何接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里直接调用 orderDao 把 order 存入到库中。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Cglib子类代理工厂 * 对UserDao在内存中动态构建一个子类对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//维护目标对象</span>    <span class="token keyword">private</span> Object orderService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CglibProxy</span><span class="token punctuation">(</span>Object orderService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderService <span class="token operator">=</span> orderService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//给目标对象创建一个代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.工具类</span>        Enhancer en <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.设置父类</span>        en<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>orderService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.设置回调函数</span>        en<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.创建子类(代理对象)</span>        <span class="token keyword">return</span> en<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     @Override    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy proxy<span class="token punctuation">)</span> throws Throwable <span class="token punctuation">{</span>        <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>orderService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>模拟 Controller 层  Cglib 的使用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppController2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IOrderService iOrderService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般是 @Autowire</span>        iOrderService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IOrderServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        代理对象        IOrderService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>IOrderService <span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>iOrderService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行代理对象的方法</span>        int result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">saveOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-6-3-代理模式的总结"><a href="#3-6-3-代理模式的总结" class="headerlink" title="3.6.3 代理模式的总结"></a>3.6.3 代理模式的总结</h4><p><img src="https://images.gitbook.cn/5d9eef40-4e62-11ea-ae10-63f5622e4259" alt="在这里插入图片描述"></p><h3 id="3-7-外观模式"><a href="#3-7-外观模式" class="headerlink" title="3.7 外观模式"></a>3.7 外观模式</h3><h4 id="3-7-1-什么是外观模式？"><a href="#3-7-1-什么是外观模式？" class="headerlink" title="3.7.1 什么是外观模式？"></a>3.7.1 什么是外观模式？</h4><p><strong>外观模式</strong> : 隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。还称之为：门面模式。</p><h4 id="3-7-2-外观模式的适用场景和优点？"><a href="#3-7-2-外观模式的适用场景和优点？" class="headerlink" title="3.7.2 外观模式的适用场景和优点？"></a>3.7.2 外观模式的适用场景和优点？</h4><p>一图明白一切。<br><img src="https://images.gitbook.cn/5b4d92f0-4e67-11ea-a847-a5aa0d0597f8" alt="在这里插入图片描述"></p><h4 id="3-7-3-外观模式的实现"><a href="#3-7-3-外观模式的实现" class="headerlink" title="3.7.3 外观模式的实现"></a>3.7.3 外观模式的实现</h4><blockquote><p>以 我们拿出手机 解锁，给李萍打电话为例。</p></blockquote><p>以面向对象的设计思路，具体实现步骤应该如下所示：</p><ol><li>人拿出手机</li><li>手机解锁</li><li>手机按照号码拨打电话给李萍</li></ol><p>需要两个类，一个是 Person 类，另一个是 Phone 类。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从裤子中拿出手机来。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>public class Phone {    public void clear(){        System.out.println("手机解锁.....");    }    public void tell(){        System.out.println("拨打电话给李萍");    }}</code></pre><p>如果没有用外观模式时，我们需要这几步能打电话。</p><pre><code>public class Test {    public static void main(String[] args) {        Person person = new Person();        Phone phone = new Phone();        person.takePhone();        phone.clear();        phone.tell();    }}</code></pre><p>如果用外观模式时，隐藏系统的复杂性，向客户端提供一个简单的接口。</p><pre><code>public class TellFacade {    /**     * 提供一个接口，系统的复杂性     */    public void tell(){        Person person = new Person();        Phone phone = new Phone();        person.takePhone();        phone.clear();        phone.tell();    }}</code></pre><pre><code>public class FacedeTest {    public static void main(String[] args) {        TellFacade tellFacade = new TellFacade();        tellFacade.tell();    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Java 的排序算法</title>
      <link href="/2020/03/06/pai-xu-suan-fa/"/>
      <url>/2020/03/06/pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>排序算法，即通过特定的算法因式将一组或多组数据按照既定模式进行重新排序。这种新序列遵循着一定的规则，体现出一定的规律，因此，经处理后的数据便于筛选和计算，大大提高了计算效率。对于排序，我们首先要求其具有一定的稳定性，</p><blockquote><ul><li>本节主要是对八大排序算法的详细整理</li><li>采用python分别对算法进行实现</li></ul></blockquote><h2 id="常见的排序算法汇总"><a href="#常见的排序算法汇总" class="headerlink" title="常见的排序算法汇总"></a>常见的排序算法汇总</h2><p><img src="http://chuantu.xyz/t6/702/1570781056x3661913030.png" alt="八大排序算法"></p><h2 id="常用的排序算法的时间复杂度"><a href="#常用的排序算法的时间复杂度" class="headerlink" title="常用的排序算法的时间复杂度"></a>常用的排序算法的时间复杂度</h2><img src="https://upload-images.jianshu.io/upload_images/1156494-62f859c2ac6f95ff.png" width="100%"><hr><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><blockquote><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了。<br>1、因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。<br>2、插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。</p></blockquote><h4 id="1、算法思想"><a href="#1、算法思想" class="headerlink" title="1、算法思想"></a>1、算法思想</h4><blockquote><p>1、直接插入排序的核心思想就是：将数组的所有元素依次跟前面已经排序好的元素比较，如果选择的元素比已排序的元素小，则交换，知道所有元素都比较过:<br>2、这里插入是按照从后往前遍历</p></blockquote><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif" alt="插入排序的算法思想"></p><h4 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h4><ul><li><strong>python代码实现</strong></li></ul><pre><code>def insert_sort(array):    if len(array) &lt; 2 :        return array    else:        for j in range(len(array) - 1):            for i in range(j-1,-1,-1):                if array[i+1] &lt; array[i]:                    temp = array[i+1]                    array[i+1] = array[i]                    array[i] = temp                else:                    continue    return array;array_0 = [12, 23, 54, 32, 11, 76, 5, 73]print(insert_sort(array_0))</code></pre><ul><li><strong>Java代码实现</strong></li></ul><pre><code>public class InsertSort implements IArraySort {    @Override    public int[] sort(int[] sourceArray) throws Exception {        // 对 arr 进行拷贝，不改变参数内容        int[] arr = Arrays.copyOf(sourceArray, sourceArray.length);        // 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的        for (int i = 1; i &lt; arr.length; i++) {            // 记录要插入的数据            int tmp = arr[i];            // 从已经排序的序列最右边的开始比较，找到比其小的数            int j = i;            while (j &gt; 0 &amp;&amp; tmp &lt; arr[j - 1]) {                arr[j] = arr[j - 1];                j--;            }            // 存在比其小的数，插入            if (j != i) {                arr[j] = tmp;            }        }        return arr;    }}</code></pre><hr><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><blockquote><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p></blockquote><h4 id="1、算法思想-1"><a href="#1、算法思想-1" class="headerlink" title="1、算法思想"></a>1、算法思想</h4><blockquote><p>1、首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。<br>2、再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br>3、重复第二步，直到所有元素均排序完毕。</p></blockquote><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif" alt="选择排序算法思想"></p><h4 id="2、代码实现-1"><a href="#2、代码实现-1" class="headerlink" title="2、代码实现"></a>2、代码实现</h4><ul><li><strong>python代码实现算法</strong></li></ul><pre><code>def select_sort(array):    if len(array) &lt; 2 :        return array    else:        for i in range(len(array)-1):            # 记录最小数的索引            min = i            for k in range(i,len(array),1):                if array[k] &lt; array[min]:                    min = k                else:                    continue            if min != i :                temp = array[i]                array[i] = array[min]                array[min] = temp        return array;array_0 = [12, 23, 54, 32, 11,11, 76, 5, 73]print(select_sort(array_0))</code></pre><ul><li><strong>Java代码实现算法</strong></li></ul><pre><code>public class SelectionSort implements IArraySort {    @Override    public int[] sort(int[] sourceArray) throws Exception {        int[] arr = Arrays.copyOf(sourceArray, sourceArray.length);        // 总共要经过 N-1 轮比较        for (int i = 0; i &lt; arr.length - 1; i++) {            int min = i;            // 每轮需要比较的次数 N-i            for (int j = i + 1; j &lt; arr.length; j++) {                if (arr[j] &lt; arr[min]) {                    // 记录目前能找到的最小值元素的下标                    min = j;                }            }            // 将找到的最小值和i位置所在的值进行交换            if (i != min) {                int tmp = arr[i];                arr[i] = arr[min];                arr[min] = tmp;            }        }        return arr;    }}</code></pre><hr><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><blockquote><p><strong>堆排序（Heapsort）</strong>是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：<br>    1、大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；<br>    2、小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；<br> 堆排序的平均时间复杂度为 Ο(nlogn)。</p></blockquote><h4 id="1、算法思想-2"><a href="#1、算法思想-2" class="headerlink" title="1、算法思想"></a>1、算法思想</h4><h4 id="2、代码实现-2"><a href="#2、代码实现-2" class="headerlink" title="2、代码实现"></a>2、代码实现</h4><hr><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><blockquote><p><strong>快速排序</strong>是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。<br>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。<br> 快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。<br> 快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！它是处理大数据最快的排序算法之一了。</p></blockquote><h4 id="1、算法思想-3"><a href="#1、算法思想-3" class="headerlink" title="1、算法思想"></a>1、算法思想</h4><p>1、从数列中挑出一个元素，称为 “基准”（pivot）;<br>2、重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；<br>3、递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif" alt="快速排序的算法思想"></p><h4 id="2、代码实现-3"><a href="#2、代码实现-3" class="headerlink" title="2、代码实现"></a>2、代码实现</h4><ul><li><strong>python代码实现</strong></li></ul><pre><code>def quick_sort(array,left,right):    if len(array) &lt; 2 :        return array    else :        if left &lt; right :           mid = partition(array, left, right)           quick_sort(array,left,mid-1)           quick_sort(array,mid+1,right)def partition(array,left,right):    tmp = array[left]    while left &lt; right:        while left &lt; right and array[right] &gt;= tmp :            right = right - 1        array[left] = array[right]        while left &lt; right and array[left] &lt;= tmp :            left = left - 1        array[right] = array[left]    #  跳出循环时low和high相等, 此时的low或high就是tmp的正确索引位置    #  由原理部分可以很清楚的知道low位置的值并不是tmp, 所以需要将tmp赋值给arr[low]    array[left] = tmp    return leftarray_0 = [12, 23, 54, 32, 11,11, 76, 5, 73]print(quick_sort(array_0,0,len(array_0)-1))</code></pre><ul><li><strong>python代码实现</strong><pre><code></code></pre></li></ul><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java必备知识总结</title>
      <link href="/2020/03/06/java-bi-bei-zhi-shi-zong-jie/"/>
      <url>/2020/03/06/java-bi-bei-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>整理知识，学习笔记</li><li>发布日记，杂文，所见所想</li><li>撰写发布技术文稿（代码支持）</li><li>撰写发布学术论文（LaTeX 公式支持）</li></ul></blockquote><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p><code>反射 (Reflection)</code> 是 Java 的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。   </p><blockquote><p>简而言之，通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。程序中一般的对象的类型都是在编译期就确定下来的，而 Java 反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象，即使这个对象的类型在编译期是未知的。   </p></blockquote><p>反射的核心是 <code>JVM</code> 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。   </p><ul><li>Java 反射主要提供以下功能： 重点：<strong>是运行时而不是编译时</strong>  </li></ul><p>1.在运行时判断任意一个对象所属的类；<br>2.在运行时构造任意一个类的对象；<br>3.在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；<br>4.在运行时调用任意一个对象的方法</p><h3 id="反射的基本运用"><a href="#反射的基本运用" class="headerlink" title="反射的基本运用"></a>反射的基本运用</h3><h4 id="1、获得-Class-对象"><a href="#1、获得-Class-对象" class="headerlink" title="1、获得 Class 对象"></a>1、获得 Class 对象</h4><ul><li>调用运行时类本身的 .class 属性</li></ul><pre><code>Class clazz1 = Person.class;System.out.println(clazz1.getName());</code></pre><ul><li>通过运行时类的对象获取 getClass();</li></ul><pre><code>Person p = new Person();Class clazz3 = p.getClass();System.out.println(clazz3.getName());</code></pre><ul><li>使用 Class 类的 forName 静态方法</li></ul><pre><code>try {    Class&lt;?&gt; aClass = Class.forName("com.lijian.Thread.Foo");    System.out.println(aClass.getName());} catch (ClassNotFoundException e) {    System.out.println("该类没有找到");}</code></pre><ul><li>（了解）通过类的加载器 ClassLoader</li></ul><pre><code>ClassLoader classLoader = this.getClass().getClassLoader();    try {        Class&lt;?&gt; aClass = classLoader.loadClass("com.lijian.Thread.Foo");        System.out.println(aClass.getName());    } catch (ClassNotFoundException e) {        System.out.println("该类没有找到");}</code></pre><h4 id="2、判断是否为某个类的实例"><a href="#2、判断是否为某个类的实例" class="headerlink" title="2、判断是否为某个类的实例"></a>2、判断是否为某个类的实例</h4><p>一般地，我们用 instanceof 关键字来判断是否为某个类的实例。同时我们也可以借助反射中 Class 对象的 isInstance() 方法来判断是否为某个类的实例，它是一个 native 方法：</p><pre><code>public native boolean isInstance(Object obj);</code></pre><h4 id="3、创建实例"><a href="#3、创建实例" class="headerlink" title="3、创建实例"></a>3、创建实例</h4><p>通过反射来生成对象主要有两种方式。</p><ul><li>使用Class对象的newInstance()方法来创建Class对象对应类的实例。</li></ul><pre><code>Class&lt;?&gt; c = String.class;Object str = c.newInstance();</code></pre><ul><li>先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建实例。这种方法可以用指定的构造器构造类的实例。</li></ul><pre><code>//获取String所对应的Class对象Class&lt;?&gt; c = String.class;//获取String类带一个String参数的构造器Constructor constructor = c.getConstructor(String.class);//根据构造器创建实例Object obj = constructor.newInstance("23333");System.out.println(obj);</code></pre><h4 id="4、获取方法、属性名"><a href="#4、获取方法、属性名" class="headerlink" title="4、获取方法、属性名"></a>4、获取方法、属性名</h4><ul><li>获取某个Class对象的方法集合，主要有以下几个方法：<br>getDeclaredMethods 方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</li></ul><pre><code>public Method[] getDeclaredMethods() throws SecurityExceptionpublic Field[] getDeclaredFields() throws SecurityException</code></pre><ul><li>getMethods 方法返回某个类的所有公用（public）方法，包括其继承类的公用方法。</li></ul><pre><code>public Method[] getMethods() throws SecurityExceptionpublic Field[] getFields() throws SecurityException</code></pre><ul><li>getMethod 方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象。</li></ul><pre><code>public Method getMethod(String name, Class&lt;?&gt;... parameterTypes)public Field getField(String name)</code></pre><blockquote><p><strong>获取方法的汇总代码</strong></p></blockquote><pre><code>public class Reflex {    public static void main(String[] args) {        Class&lt;MethodClass&gt; methodClassClass = MethodClass.class;        try {            // 区别重载 获取方法            Method add = methodClassClass.getMethod("add", int.class, int.class);            System.out.println(add.getName());            //getMethods()方法获取的所有方法 不包括继承            Method[] declaredMethods = methodClassClass.getDeclaredMethods();            for (Method declaredMethod : declaredMethods) {                System.out.println(declaredMethod.getName());            }            System.out.println("getMethods获取的方法：");            //getMethods()方法获取的所有方法 包括继承            Method[] methods = methodClassClass.getMethods();            for (Method method : methods) {                System.out.println(method.getName());            }        } catch (NoSuchMethodException e) {            e.printStackTrace();        }    }}public class MethodClass {        public final int fuck = 3;        public int add(int a,int b) {            return a+b;        }        public int sub(int a,int b) {            return a+b;        }}</code></pre><h4 id="5、获取构造器信息"><a href="#5、获取构造器信息" class="headerlink" title="5、获取构造器信息"></a>5、获取构造器信息</h4><p>获取类构造器的用法与上述获取方法的用法类似。主要是通过Class类的getConstructor方法得到Constructor类的一个实例，而Constructor类有一个newInstance方法可以创建一个对象实例:</p><pre><code>public T newInstance(Object ... initargs)</code></pre><p>此方法可以根据传入的参数来调用对应的Constructor创建对象实例。</p><h4 id="6、获取类的成员变量（字段）信息"><a href="#6、获取类的成员变量（字段）信息" class="headerlink" title="6、获取类的成员变量（字段）信息"></a>6、获取类的成员变量（字段）信息</h4><p>主要是这几个方法，在此不再赘述：</p><pre><code>getFiled：访问公有的成员变量getDeclaredField：所有已声明的成员变量，但不能得到其父类的成员变量getFileds 和 getDeclaredFields 方法用法同上（参照 Method）。</code></pre><h4 id="7、调用方法"><a href="#7、调用方法" class="headerlink" title="7、调用方法"></a>7、调用方法</h4><p>当我们从类中获取了一个方法后，我们就可以用 invoke() 方法来调用这个方法。invoke 方法的原型为:</p><pre><code>public Object invoke(Object obj, Object... args)        throws IllegalAccessException, IllegalArgumentException,           InvocationTargetException</code></pre><blockquote><p><strong>调用方法的汇总代码</strong></p></blockquote><pre><code>public static void main(String[] args) throws IllegalAccessException, InstantiationException {        Class&lt;?&gt; methodClassClass = MethodClass.class;        //创建methodClass的实例        Object obj = methodClassClass.newInstance();        try {            // 区别重载 获取方法            Method add = methodClassClass.getMethod("add", int.class, int.class);            //调用method对应的方法 =&gt; add(1,4)            Object result = add.invoke(obj, 1, 2);            System.out.println(result);        } catch (NoSuchMethodException | InvocationTargetException e) {            e.printStackTrace();        }    }</code></pre><pre><code>public class Reflex {    public static void main(String[] args) throws IllegalAccessException, InstantiationException {        Class&lt;?&gt; methodClassClass = MethodClass.class;        Object o = methodClassClass.newInstance();        try {            Field field = methodClassClass.getDeclaredField("fuck");            Method method = o.getClass().getMethod("get" + getMethodName(field.getName()));            Object invoke = method.invoke(o);            System.out.println(field.getName() + "=" + (int) invoke);        } catch (Exception  e) {            e.printStackTrace();        }    }    private static String getMethodName(String fildeName) throws Exception{                 byte[] items = fildeName.getBytes();                 items[0] = (byte) ((char) items[0] - 'a' + 'A');                 return new String(items);    }}</code></pre><h2 id="常见的五种单例模式"><a href="#常见的五种单例模式" class="headerlink" title="常见的五种单例模式"></a>常见的五种单例模式</h2><h3 id="1、饿汉式-线程安全，调用效率高，但是不能延时加载"><a href="#1、饿汉式-线程安全，调用效率高，但是不能延时加载" class="headerlink" title="1、饿汉式 (线程安全，调用效率高，但是不能延时加载)"></a>1、饿汉式 (线程安全，调用效率高，但是不能延时加载)</h3><pre><code>public class Singleton1 {   /*    * 饿汉式是在声明的时候就已经初始化Singleton1,确保了对象的唯一性    *    * 声明的时候就初始化对象会浪费不必要的资源    **/    private static Singleton1 instance = new Singleton1();    private Singleton1() {    }    // 通过静态方法或枚举返回单例对象    public Singleton1 getInstance() {        return instance;    }}</code></pre><blockquote><p>一上来就把单例对象给创建出来了，要用的时候直接返回即可，这种可以说是单例模式最简单的一种实现方式，但是问题也比较明显，单例在还没有使用的时候，初始化已经完成了，也就是说，如果程序从有到尾都没有使用这个单例的话，单例的对象还是会创建，这就造成了不必要资源浪费，多以不推荐使用这种方式。</p></blockquote><h3 id="2、懒汉式（线程安全，调用效率不高，但是能延迟加载）"><a href="#2、懒汉式（线程安全，调用效率不高，但是能延迟加载）" class="headerlink" title="2、懒汉式（线程安全，调用效率不高，但是能延迟加载）"></a>2、懒汉式（线程安全，调用效率不高，但是能延迟加载）</h3><pre><code>public class SingletonDemo2 {    //类初始化时，不初始化这个对象(延时加载，真正用的时候再创建)    private static SingletonDemo2 instance;    //构造器私有化    private SingletonDemo2(){}    //方法同步，调用效率低    public static synchronized SingletonDemo2 getInstance(){        if(instance==null){            instance=new SingletonDemo2();        }        return instance;    }}</code></pre><h3 id="3、Double-CheckLock-双重锁判断机制-DCL-也就是（由于JVM底层模型原因，偶尔会出问题，不建议使用）"><a href="#3、Double-CheckLock-双重锁判断机制-DCL-也就是（由于JVM底层模型原因，偶尔会出问题，不建议使用）" class="headerlink" title="3、Double CheckLock 双重锁判断机制 DCL 也就是（由于JVM底层模型原因，偶尔会出问题，不建议使用）"></a>3、Double CheckLock 双重锁判断机制 DCL 也就是（由于JVM底层模型原因，偶尔会出问题，不建议使用）</h3><pre><code>public class Singleton3 {    private static Singleton3 instance;    private Singleton3() {}    /**     * 两次判空，第一次判空是为了不必要的同步，第二次判空为了在instance 为 null 的情况下创建实例     * 既保证了线程安全且单例对象初始化后调用getInstance又不会进行同步锁判断     *      * 优点:资源利用率高,效率高     * 缺点:第一次加载稍慢，由于java处理器允许乱序执行，偶尔会失败     *     * @return     */    public static Singleton3 getInstance() {        if (instance == null) {            synchronized (Singleton3.class) {                if (instance == null) {                    instance = new Singleton3();                }            }        }        return instance;    }}</code></pre><h3 id="4、★-静态内部类实现模式-线程安全，调用效率高，可以延迟加载"><a href="#4、★-静态内部类实现模式-线程安全，调用效率高，可以延迟加载" class="headerlink" title="4、★ 静态内部类实现模式 (线程安全，调用效率高，可以延迟加载)"></a>4、★ 静态内部类实现模式 (线程安全，调用效率高，可以延迟加载)</h3><pre><code>public class Singleton4 {   /*    * 当第一次加载Singleton类时并不会初始化SINGLRTON，只有第一次调用getInstance方法的时候才会初始化 SINGLETON    * 第一次调用getInstance 方法的时候虚拟机才会加载SingletonHoder类，这种方式不仅能够保证线程安全，也能够保证对象的唯一    * 还延迟了单例的实例化，所有推荐使用这种方式    **/    private Singleton4() {}    public Singleton4 getInstance() {        return SingletonHolder.SINGLETON;    }    private static class SingletonHolder {        private static final Singleton4 SINGLETON = new Singleton4();    }}</code></pre><h3 id="5、枚举类（线程安全，调用效率高，不能延时加载，可以天然的防止反射和反序列化调用）"><a href="#5、枚举类（线程安全，调用效率高，不能延时加载，可以天然的防止反射和反序列化调用）" class="headerlink" title="5、枚举类（线程安全，调用效率高，不能延时加载，可以天然的防止反射和反序列化调用）"></a>5、枚举类（线程安全，调用效率高，不能延时加载，可以天然的防止反射和反序列化调用）</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后台开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 必备 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
